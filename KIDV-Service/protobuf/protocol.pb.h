// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace KIDV {
class BaseMessage;
class BaseMessageDefaultTypeInternal;
extern BaseMessageDefaultTypeInternal _BaseMessage_default_instance_;
class ChangePassword;
class ChangePasswordDefaultTypeInternal;
extern ChangePasswordDefaultTypeInternal _ChangePassword_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Hint;
class HintDefaultTypeInternal;
extern HintDefaultTypeInternal _Hint_default_instance_;
class Login;
class LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class MsgList;
class MsgListDefaultTypeInternal;
extern MsgListDefaultTypeInternal _MsgList_default_instance_;
class Toolbar;
class ToolbarDefaultTypeInternal;
extern ToolbarDefaultTypeInternal _Toolbar_default_instance_;
class VMManagge;
class VMManaggeDefaultTypeInternal;
extern VMManaggeDefaultTypeInternal _VMManagge_default_instance_;
class VmList;
class VmListDefaultTypeInternal;
extern VmListDefaultTypeInternal _VmList_default_instance_;
class VmParam;
class VmParamDefaultTypeInternal;
extern VmParamDefaultTypeInternal _VmParam_default_instance_;
class loginType;
class loginTypeDefaultTypeInternal;
extern loginTypeDefaultTypeInternal _loginType_default_instance_;
class msgContent;
class msgContentDefaultTypeInternal;
extern msgContentDefaultTypeInternal _msgContent_default_instance_;
class remainClientLaunch;
class remainClientLaunchDefaultTypeInternal;
extern remainClientLaunchDefaultTypeInternal _remainClientLaunch_default_instance_;
class serverLauch;
class serverLauchDefaultTypeInternal;
extern serverLauchDefaultTypeInternal _serverLauch_default_instance_;
class snapshoot;
class snapshootDefaultTypeInternal;
extern snapshootDefaultTypeInternal _snapshoot_default_instance_;
class snapshootManage;
class snapshootManageDefaultTypeInternal;
extern snapshootManageDefaultTypeInternal _snapshootManage_default_instance_;
}  // namespace KIDV
PROTOBUF_NAMESPACE_OPEN
template<> ::KIDV::BaseMessage* Arena::CreateMaybeMessage<::KIDV::BaseMessage>(Arena*);
template<> ::KIDV::ChangePassword* Arena::CreateMaybeMessage<::KIDV::ChangePassword>(Arena*);
template<> ::KIDV::Config* Arena::CreateMaybeMessage<::KIDV::Config>(Arena*);
template<> ::KIDV::Hint* Arena::CreateMaybeMessage<::KIDV::Hint>(Arena*);
template<> ::KIDV::Login* Arena::CreateMaybeMessage<::KIDV::Login>(Arena*);
template<> ::KIDV::MsgList* Arena::CreateMaybeMessage<::KIDV::MsgList>(Arena*);
template<> ::KIDV::Toolbar* Arena::CreateMaybeMessage<::KIDV::Toolbar>(Arena*);
template<> ::KIDV::VMManagge* Arena::CreateMaybeMessage<::KIDV::VMManagge>(Arena*);
template<> ::KIDV::VmList* Arena::CreateMaybeMessage<::KIDV::VmList>(Arena*);
template<> ::KIDV::VmParam* Arena::CreateMaybeMessage<::KIDV::VmParam>(Arena*);
template<> ::KIDV::loginType* Arena::CreateMaybeMessage<::KIDV::loginType>(Arena*);
template<> ::KIDV::msgContent* Arena::CreateMaybeMessage<::KIDV::msgContent>(Arena*);
template<> ::KIDV::remainClientLaunch* Arena::CreateMaybeMessage<::KIDV::remainClientLaunch>(Arena*);
template<> ::KIDV::serverLauch* Arena::CreateMaybeMessage<::KIDV::serverLauch>(Arena*);
template<> ::KIDV::snapshoot* Arena::CreateMaybeMessage<::KIDV::snapshoot>(Arena*);
template<> ::KIDV::snapshootManage* Arena::CreateMaybeMessage<::KIDV::snapshootManage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KIDV {

enum BaseMessage_MsgType : int {
  BaseMessage_MsgType_UNDEFINE = 0,
  BaseMessage_MsgType_CONFIG = 1,
  BaseMessage_MsgType_LOGIN = 2,
  BaseMessage_MsgType_TOOLBAR = 3,
  BaseMessage_MsgType_CHANGE_PASSWORD = 4,
  BaseMessage_MsgType_REQUEST_VM_LIST = 5,
  BaseMessage_MsgType_VM_MANAGE = 6,
  BaseMessage_MsgType_SNAPSHOOT_MANAGE = 7,
  BaseMessage_MsgType_REMAIN_CLINET_LAUNCH = 8,
  BaseMessage_MsgType_SERVER_LAUNCH = 9,
  BaseMessage_MsgType_BaseMessage_MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BaseMessage_MsgType_BaseMessage_MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BaseMessage_MsgType_IsValid(int value);
constexpr BaseMessage_MsgType BaseMessage_MsgType_MsgType_MIN = BaseMessage_MsgType_UNDEFINE;
constexpr BaseMessage_MsgType BaseMessage_MsgType_MsgType_MAX = BaseMessage_MsgType_SERVER_LAUNCH;
constexpr int BaseMessage_MsgType_MsgType_ARRAYSIZE = BaseMessage_MsgType_MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BaseMessage_MsgType_descriptor();
template<typename T>
inline const std::string& BaseMessage_MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BaseMessage_MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BaseMessage_MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BaseMessage_MsgType_descriptor(), enum_t_value);
}
inline bool BaseMessage_MsgType_Parse(
    const std::string& name, BaseMessage_MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BaseMessage_MsgType>(
    BaseMessage_MsgType_descriptor(), name, value);
}
enum serverLauch_MsgType : int {
  serverLauch_MsgType_UNDEFINE = 0,
  serverLauch_MsgType_LOGIN_TYPE = 1,
  serverLauch_MsgType_HINT = 2,
  serverLauch_MsgType_VM_LIST = 3,
  serverLauch_MsgType_MSG_LIST = 4,
  serverLauch_MsgType_serverLauch_MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  serverLauch_MsgType_serverLauch_MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool serverLauch_MsgType_IsValid(int value);
constexpr serverLauch_MsgType serverLauch_MsgType_MsgType_MIN = serverLauch_MsgType_UNDEFINE;
constexpr serverLauch_MsgType serverLauch_MsgType_MsgType_MAX = serverLauch_MsgType_MSG_LIST;
constexpr int serverLauch_MsgType_MsgType_ARRAYSIZE = serverLauch_MsgType_MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* serverLauch_MsgType_descriptor();
template<typename T>
inline const std::string& serverLauch_MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, serverLauch_MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function serverLauch_MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    serverLauch_MsgType_descriptor(), enum_t_value);
}
inline bool serverLauch_MsgType_Parse(
    const std::string& name, serverLauch_MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<serverLauch_MsgType>(
    serverLauch_MsgType_descriptor(), name, value);
}
// ===================================================================

class BaseMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.BaseMessage) */ {
 public:
  BaseMessage();
  virtual ~BaseMessage();

  BaseMessage(const BaseMessage& from);
  BaseMessage(BaseMessage&& from) noexcept
    : BaseMessage() {
    *this = ::std::move(from);
  }

  inline BaseMessage& operator=(const BaseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseMessage& operator=(BaseMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseMessage* internal_default_instance() {
    return reinterpret_cast<const BaseMessage*>(
               &_BaseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseMessage& a, BaseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseMessage* New() const final {
    return CreateMaybeMessage<BaseMessage>(nullptr);
  }

  BaseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseMessage& from);
  void MergeFrom(const BaseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.BaseMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BaseMessage_MsgType MsgType;
  static constexpr MsgType UNDEFINE =
    BaseMessage_MsgType_UNDEFINE;
  static constexpr MsgType CONFIG =
    BaseMessage_MsgType_CONFIG;
  static constexpr MsgType LOGIN =
    BaseMessage_MsgType_LOGIN;
  static constexpr MsgType TOOLBAR =
    BaseMessage_MsgType_TOOLBAR;
  static constexpr MsgType CHANGE_PASSWORD =
    BaseMessage_MsgType_CHANGE_PASSWORD;
  static constexpr MsgType REQUEST_VM_LIST =
    BaseMessage_MsgType_REQUEST_VM_LIST;
  static constexpr MsgType VM_MANAGE =
    BaseMessage_MsgType_VM_MANAGE;
  static constexpr MsgType SNAPSHOOT_MANAGE =
    BaseMessage_MsgType_SNAPSHOOT_MANAGE;
  static constexpr MsgType REMAIN_CLINET_LAUNCH =
    BaseMessage_MsgType_REMAIN_CLINET_LAUNCH;
  static constexpr MsgType SERVER_LAUNCH =
    BaseMessage_MsgType_SERVER_LAUNCH;
  static inline bool MsgType_IsValid(int value) {
    return BaseMessage_MsgType_IsValid(value);
  }
  static constexpr MsgType MsgType_MIN =
    BaseMessage_MsgType_MsgType_MIN;
  static constexpr MsgType MsgType_MAX =
    BaseMessage_MsgType_MsgType_MAX;
  static constexpr int MsgType_ARRAYSIZE =
    BaseMessage_MsgType_MsgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgType_descriptor() {
    return BaseMessage_MsgType_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgType_Name.");
    return BaseMessage_MsgType_Name(enum_t_value);
  }
  static inline bool MsgType_Parse(const std::string& name,
      MsgType* value) {
    return BaseMessage_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // .google.protobuf.Any params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const PROTOBUF_NAMESPACE_ID::Any& params() const;
  PROTOBUF_NAMESPACE_ID::Any* release_params();
  PROTOBUF_NAMESPACE_ID::Any* mutable_params();
  void set_allocated_params(PROTOBUF_NAMESPACE_ID::Any* params);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_params() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_params();
  public:

  // .KIDV.BaseMessage.MsgType msgType = 1;
  void clear_msgtype();
  ::KIDV::BaseMessage_MsgType msgtype() const;
  void set_msgtype(::KIDV::BaseMessage_MsgType value);
  private:
  ::KIDV::BaseMessage_MsgType _internal_msgtype() const;
  void _internal_set_msgtype(::KIDV::BaseMessage_MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.BaseMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* params_;
  int msgtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class serverLauch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.serverLauch) */ {
 public:
  serverLauch();
  virtual ~serverLauch();

  serverLauch(const serverLauch& from);
  serverLauch(serverLauch&& from) noexcept
    : serverLauch() {
    *this = ::std::move(from);
  }

  inline serverLauch& operator=(const serverLauch& from) {
    CopyFrom(from);
    return *this;
  }
  inline serverLauch& operator=(serverLauch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const serverLauch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const serverLauch* internal_default_instance() {
    return reinterpret_cast<const serverLauch*>(
               &_serverLauch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(serverLauch& a, serverLauch& b) {
    a.Swap(&b);
  }
  inline void Swap(serverLauch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline serverLauch* New() const final {
    return CreateMaybeMessage<serverLauch>(nullptr);
  }

  serverLauch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<serverLauch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const serverLauch& from);
  void MergeFrom(const serverLauch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(serverLauch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.serverLauch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef serverLauch_MsgType MsgType;
  static constexpr MsgType UNDEFINE =
    serverLauch_MsgType_UNDEFINE;
  static constexpr MsgType LOGIN_TYPE =
    serverLauch_MsgType_LOGIN_TYPE;
  static constexpr MsgType HINT =
    serverLauch_MsgType_HINT;
  static constexpr MsgType VM_LIST =
    serverLauch_MsgType_VM_LIST;
  static constexpr MsgType MSG_LIST =
    serverLauch_MsgType_MSG_LIST;
  static inline bool MsgType_IsValid(int value) {
    return serverLauch_MsgType_IsValid(value);
  }
  static constexpr MsgType MsgType_MIN =
    serverLauch_MsgType_MsgType_MIN;
  static constexpr MsgType MsgType_MAX =
    serverLauch_MsgType_MsgType_MAX;
  static constexpr int MsgType_ARRAYSIZE =
    serverLauch_MsgType_MsgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgType_descriptor() {
    return serverLauch_MsgType_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgType_Name.");
    return serverLauch_MsgType_Name(enum_t_value);
  }
  static inline bool MsgType_Parse(const std::string& name,
      MsgType* value) {
    return serverLauch_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // .google.protobuf.Any params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const PROTOBUF_NAMESPACE_ID::Any& params() const;
  PROTOBUF_NAMESPACE_ID::Any* release_params();
  PROTOBUF_NAMESPACE_ID::Any* mutable_params();
  void set_allocated_params(PROTOBUF_NAMESPACE_ID::Any* params);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_params() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_params();
  public:

  // .KIDV.serverLauch.MsgType msgType = 1;
  void clear_msgtype();
  ::KIDV::serverLauch_MsgType msgtype() const;
  void set_msgtype(::KIDV::serverLauch_MsgType value);
  private:
  ::KIDV::serverLauch_MsgType _internal_msgtype() const;
  void _internal_set_msgtype(::KIDV::serverLauch_MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.serverLauch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* params_;
  int msgtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.Config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIPFieldNumber = 1,
    kPortFieldNumber = 2,
    kIsSaveFieldNumber = 3,
    kReturnValueFieldNumber = 4,
  };
  // string IP = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string port = 2;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // bool isSave = 3;
  void clear_issave();
  bool issave() const;
  void set_issave(bool value);
  private:
  bool _internal_issave() const;
  void _internal_set_issave(bool value);
  public:

  // int32 returnValue = 4;
  void clear_returnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 returnvalue() const;
  void set_returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_returnvalue() const;
  void _internal_set_returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.Config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  bool issave_;
  ::PROTOBUF_NAMESPACE_ID::int32 returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Login :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.Login) */ {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Login* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login* New() const final {
    return CreateMaybeMessage<Login>(nullptr);
  }

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.Login";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kResultFieldNumber = 4,
    kLoginMethodFieldNumber = 1,
  };
  // string userName = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string result = 4;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // int32 loginMethod = 1;
  void clear_loginmethod();
  ::PROTOBUF_NAMESPACE_ID::int32 loginmethod() const;
  void set_loginmethod(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_loginmethod() const;
  void _internal_set_loginmethod(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.Login)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::int32 loginmethod_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Toolbar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.Toolbar) */ {
 public:
  Toolbar();
  virtual ~Toolbar();

  Toolbar(const Toolbar& from);
  Toolbar(Toolbar&& from) noexcept
    : Toolbar() {
    *this = ::std::move(from);
  }

  inline Toolbar& operator=(const Toolbar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Toolbar& operator=(Toolbar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Toolbar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Toolbar* internal_default_instance() {
    return reinterpret_cast<const Toolbar*>(
               &_Toolbar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Toolbar& a, Toolbar& b) {
    a.Swap(&b);
  }
  inline void Swap(Toolbar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Toolbar* New() const final {
    return CreateMaybeMessage<Toolbar>(nullptr);
  }

  Toolbar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Toolbar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Toolbar& from);
  void MergeFrom(const Toolbar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Toolbar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.Toolbar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshootListFieldNumber = 3,
    kParamFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
    kReturnValueFieldNumber = 4,
  };
  // repeated .KIDV.snapshoot snapshootList = 3;
  int snapshootlist_size() const;
  private:
  int _internal_snapshootlist_size() const;
  public:
  void clear_snapshootlist();
  ::KIDV::snapshoot* mutable_snapshootlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::snapshoot >*
      mutable_snapshootlist();
  private:
  const ::KIDV::snapshoot& _internal_snapshootlist(int index) const;
  ::KIDV::snapshoot* _internal_add_snapshootlist();
  public:
  const ::KIDV::snapshoot& snapshootlist(int index) const;
  ::KIDV::snapshoot* add_snapshootlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::snapshoot >&
      snapshootlist() const;

  // string param = 2;
  void clear_param();
  const std::string& param() const;
  void set_param(const std::string& value);
  void set_param(std::string&& value);
  void set_param(const char* value);
  void set_param(const char* value, size_t size);
  std::string* mutable_param();
  std::string* release_param();
  void set_allocated_param(std::string* param);
  private:
  const std::string& _internal_param() const;
  void _internal_set_param(const std::string& value);
  std::string* _internal_mutable_param();
  public:

  // int32 msgType = 1;
  void clear_msgtype();
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype() const;
  void set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgtype() const;
  void _internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 returnValue = 4;
  void clear_returnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 returnvalue() const;
  void set_returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_returnvalue() const;
  void _internal_set_returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.Toolbar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::snapshoot > snapshootlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 returnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ChangePassword :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.ChangePassword) */ {
 public:
  ChangePassword();
  virtual ~ChangePassword();

  ChangePassword(const ChangePassword& from);
  ChangePassword(ChangePassword&& from) noexcept
    : ChangePassword() {
    *this = ::std::move(from);
  }

  inline ChangePassword& operator=(const ChangePassword& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePassword& operator=(ChangePassword&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangePassword& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangePassword* internal_default_instance() {
    return reinterpret_cast<const ChangePassword*>(
               &_ChangePassword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChangePassword& a, ChangePassword& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePassword* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangePassword* New() const final {
    return CreateMaybeMessage<ChangePassword>(nullptr);
  }

  ChangePassword* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePassword>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePassword& from);
  void MergeFrom(const ChangePassword& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePassword* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.ChangePassword";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kOldPasswordFieldNumber = 2,
    kNewPasswordFieldNumber = 3,
    kNewPasswordTwoFieldNumber = 4,
    kChangeResultFieldNumber = 5,
  };
  // string userName = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string oldPassword = 2;
  void clear_oldpassword();
  const std::string& oldpassword() const;
  void set_oldpassword(const std::string& value);
  void set_oldpassword(std::string&& value);
  void set_oldpassword(const char* value);
  void set_oldpassword(const char* value, size_t size);
  std::string* mutable_oldpassword();
  std::string* release_oldpassword();
  void set_allocated_oldpassword(std::string* oldpassword);
  private:
  const std::string& _internal_oldpassword() const;
  void _internal_set_oldpassword(const std::string& value);
  std::string* _internal_mutable_oldpassword();
  public:

  // string newPassword = 3;
  void clear_newpassword();
  const std::string& newpassword() const;
  void set_newpassword(const std::string& value);
  void set_newpassword(std::string&& value);
  void set_newpassword(const char* value);
  void set_newpassword(const char* value, size_t size);
  std::string* mutable_newpassword();
  std::string* release_newpassword();
  void set_allocated_newpassword(std::string* newpassword);
  private:
  const std::string& _internal_newpassword() const;
  void _internal_set_newpassword(const std::string& value);
  std::string* _internal_mutable_newpassword();
  public:

  // string newPasswordTwo = 4;
  void clear_newpasswordtwo();
  const std::string& newpasswordtwo() const;
  void set_newpasswordtwo(const std::string& value);
  void set_newpasswordtwo(std::string&& value);
  void set_newpasswordtwo(const char* value);
  void set_newpasswordtwo(const char* value, size_t size);
  std::string* mutable_newpasswordtwo();
  std::string* release_newpasswordtwo();
  void set_allocated_newpasswordtwo(std::string* newpasswordtwo);
  private:
  const std::string& _internal_newpasswordtwo() const;
  void _internal_set_newpasswordtwo(const std::string& value);
  std::string* _internal_mutable_newpasswordtwo();
  public:

  // int32 changeResult = 5;
  void clear_changeresult();
  ::PROTOBUF_NAMESPACE_ID::int32 changeresult() const;
  void set_changeresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_changeresult() const;
  void _internal_set_changeresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.ChangePassword)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldpassword_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newpassword_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newpasswordtwo_;
  ::PROTOBUF_NAMESPACE_ID::int32 changeresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class VMManagge :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.VMManagge) */ {
 public:
  VMManagge();
  virtual ~VMManagge();

  VMManagge(const VMManagge& from);
  VMManagge(VMManagge&& from) noexcept
    : VMManagge() {
    *this = ::std::move(from);
  }

  inline VMManagge& operator=(const VMManagge& from) {
    CopyFrom(from);
    return *this;
  }
  inline VMManagge& operator=(VMManagge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VMManagge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VMManagge* internal_default_instance() {
    return reinterpret_cast<const VMManagge*>(
               &_VMManagge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VMManagge& a, VMManagge& b) {
    a.Swap(&b);
  }
  inline void Swap(VMManagge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VMManagge* New() const final {
    return CreateMaybeMessage<VMManagge>(nullptr);
  }

  VMManagge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VMManagge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VMManagge& from);
  void MergeFrom(const VMManagge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VMManagge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.VMManagge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMachineNameFieldNumber = 2,
    kNewMachineNameFieldNumber = 5,
    kUuidFieldNumber = 1,
    kMsgTypeFieldNumber = 3,
    kDownloadProgressFieldNumber = 4,
  };
  // string machineName = 2;
  void clear_machinename();
  const std::string& machinename() const;
  void set_machinename(const std::string& value);
  void set_machinename(std::string&& value);
  void set_machinename(const char* value);
  void set_machinename(const char* value, size_t size);
  std::string* mutable_machinename();
  std::string* release_machinename();
  void set_allocated_machinename(std::string* machinename);
  private:
  const std::string& _internal_machinename() const;
  void _internal_set_machinename(const std::string& value);
  std::string* _internal_mutable_machinename();
  public:

  // string newMachineName = 5;
  void clear_newmachinename();
  const std::string& newmachinename() const;
  void set_newmachinename(const std::string& value);
  void set_newmachinename(std::string&& value);
  void set_newmachinename(const char* value);
  void set_newmachinename(const char* value, size_t size);
  std::string* mutable_newmachinename();
  std::string* release_newmachinename();
  void set_allocated_newmachinename(std::string* newmachinename);
  private:
  const std::string& _internal_newmachinename() const;
  void _internal_set_newmachinename(const std::string& value);
  std::string* _internal_mutable_newmachinename();
  public:

  // int32 uuid = 1;
  void clear_uuid();
  ::PROTOBUF_NAMESPACE_ID::int32 uuid() const;
  void set_uuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uuid() const;
  void _internal_set_uuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msgType = 3;
  void clear_msgtype();
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype() const;
  void set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgtype() const;
  void _internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 downloadProgress = 4;
  void clear_downloadprogress();
  ::PROTOBUF_NAMESPACE_ID::int32 downloadprogress() const;
  void set_downloadprogress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_downloadprogress() const;
  void _internal_set_downloadprogress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.VMManagge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machinename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newmachinename_;
  ::PROTOBUF_NAMESPACE_ID::int32 uuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 downloadprogress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class snapshootManage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.snapshootManage) */ {
 public:
  snapshootManage();
  virtual ~snapshootManage();

  snapshootManage(const snapshootManage& from);
  snapshootManage(snapshootManage&& from) noexcept
    : snapshootManage() {
    *this = ::std::move(from);
  }

  inline snapshootManage& operator=(const snapshootManage& from) {
    CopyFrom(from);
    return *this;
  }
  inline snapshootManage& operator=(snapshootManage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const snapshootManage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const snapshootManage* internal_default_instance() {
    return reinterpret_cast<const snapshootManage*>(
               &_snapshootManage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(snapshootManage& a, snapshootManage& b) {
    a.Swap(&b);
  }
  inline void Swap(snapshootManage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline snapshootManage* New() const final {
    return CreateMaybeMessage<snapshootManage>(nullptr);
  }

  snapshootManage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<snapshootManage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const snapshootManage& from);
  void MergeFrom(const snapshootManage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(snapshootManage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.snapshootManage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // .google.protobuf.Any params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const PROTOBUF_NAMESPACE_ID::Any& params() const;
  PROTOBUF_NAMESPACE_ID::Any* release_params();
  PROTOBUF_NAMESPACE_ID::Any* mutable_params();
  void set_allocated_params(PROTOBUF_NAMESPACE_ID::Any* params);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_params() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_params();
  public:

  // int32 msgType = 1;
  void clear_msgtype();
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype() const;
  void set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgtype() const;
  void _internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.snapshootManage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  PROTOBUF_NAMESPACE_ID::Any* params_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class snapshoot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.snapshoot) */ {
 public:
  snapshoot();
  virtual ~snapshoot();

  snapshoot(const snapshoot& from);
  snapshoot(snapshoot&& from) noexcept
    : snapshoot() {
    *this = ::std::move(from);
  }

  inline snapshoot& operator=(const snapshoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline snapshoot& operator=(snapshoot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const snapshoot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const snapshoot* internal_default_instance() {
    return reinterpret_cast<const snapshoot*>(
               &_snapshoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(snapshoot& a, snapshoot& b) {
    a.Swap(&b);
  }
  inline void Swap(snapshoot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline snapshoot* New() const final {
    return CreateMaybeMessage<snapshoot>(nullptr);
  }

  snapshoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<snapshoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const snapshoot& from);
  void MergeFrom(const snapshoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(snapshoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.snapshoot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kSnapshootNameFieldNumber = 3,
    kCreateTimeFieldNumber = 4,
    kSnapshootDescribeFieldNumber = 5,
    kIdFieldNumber = 2,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string snapshootName = 3;
  void clear_snapshootname();
  const std::string& snapshootname() const;
  void set_snapshootname(const std::string& value);
  void set_snapshootname(std::string&& value);
  void set_snapshootname(const char* value);
  void set_snapshootname(const char* value, size_t size);
  std::string* mutable_snapshootname();
  std::string* release_snapshootname();
  void set_allocated_snapshootname(std::string* snapshootname);
  private:
  const std::string& _internal_snapshootname() const;
  void _internal_set_snapshootname(const std::string& value);
  std::string* _internal_mutable_snapshootname();
  public:

  // string createTime = 4;
  void clear_createtime();
  const std::string& createtime() const;
  void set_createtime(const std::string& value);
  void set_createtime(std::string&& value);
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  std::string* mutable_createtime();
  std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // string snapshootDescribe = 5;
  void clear_snapshootdescribe();
  const std::string& snapshootdescribe() const;
  void set_snapshootdescribe(const std::string& value);
  void set_snapshootdescribe(std::string&& value);
  void set_snapshootdescribe(const char* value);
  void set_snapshootdescribe(const char* value, size_t size);
  std::string* mutable_snapshootdescribe();
  std::string* release_snapshootdescribe();
  void set_allocated_snapshootdescribe(std::string* snapshootdescribe);
  private:
  const std::string& _internal_snapshootdescribe() const;
  void _internal_set_snapshootdescribe(const std::string& value);
  std::string* _internal_mutable_snapshootdescribe();
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.snapshoot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshootname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshootdescribe_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class remainClientLaunch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.remainClientLaunch) */ {
 public:
  remainClientLaunch();
  virtual ~remainClientLaunch();

  remainClientLaunch(const remainClientLaunch& from);
  remainClientLaunch(remainClientLaunch&& from) noexcept
    : remainClientLaunch() {
    *this = ::std::move(from);
  }

  inline remainClientLaunch& operator=(const remainClientLaunch& from) {
    CopyFrom(from);
    return *this;
  }
  inline remainClientLaunch& operator=(remainClientLaunch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const remainClientLaunch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const remainClientLaunch* internal_default_instance() {
    return reinterpret_cast<const remainClientLaunch*>(
               &_remainClientLaunch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(remainClientLaunch& a, remainClientLaunch& b) {
    a.Swap(&b);
  }
  inline void Swap(remainClientLaunch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline remainClientLaunch* New() const final {
    return CreateMaybeMessage<remainClientLaunch>(nullptr);
  }

  remainClientLaunch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<remainClientLaunch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const remainClientLaunch& from);
  void MergeFrom(const remainClientLaunch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(remainClientLaunch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.remainClientLaunch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // int32 msg = 1;
  void clear_msg();
  ::PROTOBUF_NAMESPACE_ID::int32 msg() const;
  void set_msg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg() const;
  void _internal_set_msg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.remainClientLaunch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class loginType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.loginType) */ {
 public:
  loginType();
  virtual ~loginType();

  loginType(const loginType& from);
  loginType(loginType&& from) noexcept
    : loginType() {
    *this = ::std::move(from);
  }

  inline loginType& operator=(const loginType& from) {
    CopyFrom(from);
    return *this;
  }
  inline loginType& operator=(loginType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loginType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const loginType* internal_default_instance() {
    return reinterpret_cast<const loginType*>(
               &_loginType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(loginType& a, loginType& b) {
    a.Swap(&b);
  }
  inline void Swap(loginType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loginType* New() const final {
    return CreateMaybeMessage<loginType>(nullptr);
  }

  loginType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loginType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loginType& from);
  void MergeFrom(const loginType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loginType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.loginType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogintypeFieldNumber = 1,
  };
  // int32 logintype = 1;
  void clear_logintype();
  ::PROTOBUF_NAMESPACE_ID::int32 logintype() const;
  void set_logintype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logintype() const;
  void _internal_set_logintype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.loginType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 logintype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Hint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.Hint) */ {
 public:
  Hint();
  virtual ~Hint();

  Hint(const Hint& from);
  Hint(Hint&& from) noexcept
    : Hint() {
    *this = ::std::move(from);
  }

  inline Hint& operator=(const Hint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hint& operator=(Hint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hint* internal_default_instance() {
    return reinterpret_cast<const Hint*>(
               &_Hint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Hint& a, Hint& b) {
    a.Swap(&b);
  }
  inline void Swap(Hint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hint* New() const final {
    return CreateMaybeMessage<Hint>(nullptr);
  }

  Hint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hint& from);
  void MergeFrom(const Hint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.Hint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHintMsgContentFieldNumber = 2,
    kHintMsgTypeFieldNumber = 1,
    kStrongHintTypeFieldNumber = 3,
    kParamFieldNumber = 4,
    kResultFieldNumber = 5,
  };
  // string hintMsgContent = 2;
  void clear_hintmsgcontent();
  const std::string& hintmsgcontent() const;
  void set_hintmsgcontent(const std::string& value);
  void set_hintmsgcontent(std::string&& value);
  void set_hintmsgcontent(const char* value);
  void set_hintmsgcontent(const char* value, size_t size);
  std::string* mutable_hintmsgcontent();
  std::string* release_hintmsgcontent();
  void set_allocated_hintmsgcontent(std::string* hintmsgcontent);
  private:
  const std::string& _internal_hintmsgcontent() const;
  void _internal_set_hintmsgcontent(const std::string& value);
  std::string* _internal_mutable_hintmsgcontent();
  public:

  // int32 hintMsgType = 1;
  void clear_hintmsgtype();
  ::PROTOBUF_NAMESPACE_ID::int32 hintmsgtype() const;
  void set_hintmsgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hintmsgtype() const;
  void _internal_set_hintmsgtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 strongHintType = 3;
  void clear_stronghinttype();
  ::PROTOBUF_NAMESPACE_ID::int32 stronghinttype() const;
  void set_stronghinttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stronghinttype() const;
  void _internal_set_stronghinttype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 param = 4;
  void clear_param();
  ::PROTOBUF_NAMESPACE_ID::int32 param() const;
  void set_param(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_param() const;
  void _internal_set_param(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 result = 5;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.Hint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hintmsgcontent_;
  ::PROTOBUF_NAMESPACE_ID::int32 hintmsgtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 stronghinttype_;
  ::PROTOBUF_NAMESPACE_ID::int32 param_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class VmList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.VmList) */ {
 public:
  VmList();
  virtual ~VmList();

  VmList(const VmList& from);
  VmList(VmList&& from) noexcept
    : VmList() {
    *this = ::std::move(from);
  }

  inline VmList& operator=(const VmList& from) {
    CopyFrom(from);
    return *this;
  }
  inline VmList& operator=(VmList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VmList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VmList* internal_default_instance() {
    return reinterpret_cast<const VmList*>(
               &_VmList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VmList& a, VmList& b) {
    a.Swap(&b);
  }
  inline void Swap(VmList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VmList* New() const final {
    return CreateMaybeMessage<VmList>(nullptr);
  }

  VmList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VmList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VmList& from);
  void MergeFrom(const VmList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VmList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.VmList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVmListFieldNumber = 1,
  };
  // repeated .KIDV.VmParam VmList = 1;
  int vmlist_size() const;
  private:
  int _internal_vmlist_size() const;
  public:
  void clear_vmlist();
  ::KIDV::VmParam* mutable_vmlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::VmParam >*
      mutable_vmlist();
  private:
  const ::KIDV::VmParam& _internal_vmlist(int index) const;
  ::KIDV::VmParam* _internal_add_vmlist();
  public:
  const ::KIDV::VmParam& vmlist(int index) const;
  ::KIDV::VmParam* add_vmlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::VmParam >&
      vmlist() const;

  // @@protoc_insertion_point(class_scope:KIDV.VmList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::VmParam > vmlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class VmParam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.VmParam) */ {
 public:
  VmParam();
  virtual ~VmParam();

  VmParam(const VmParam& from);
  VmParam(VmParam&& from) noexcept
    : VmParam() {
    *this = ::std::move(from);
  }

  inline VmParam& operator=(const VmParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline VmParam& operator=(VmParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VmParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VmParam* internal_default_instance() {
    return reinterpret_cast<const VmParam*>(
               &_VmParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(VmParam& a, VmParam& b) {
    a.Swap(&b);
  }
  inline void Swap(VmParam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VmParam* New() const final {
    return CreateMaybeMessage<VmParam>(nullptr);
  }

  VmParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VmParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VmParam& from);
  void MergeFrom(const VmParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VmParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.VmParam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUUIDFieldNumber = 1,
    kNameFieldNumber = 2,
    kVmStateFieldNumber = 3,
  };
  // string UUID = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 VmState = 3;
  void clear_vmstate();
  ::PROTOBUF_NAMESPACE_ID::int32 vmstate() const;
  void set_vmstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vmstate() const;
  void _internal_set_vmstate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KIDV.VmParam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 vmstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class MsgList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.MsgList) */ {
 public:
  MsgList();
  virtual ~MsgList();

  MsgList(const MsgList& from);
  MsgList(MsgList&& from) noexcept
    : MsgList() {
    *this = ::std::move(from);
  }

  inline MsgList& operator=(const MsgList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgList& operator=(MsgList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgList* internal_default_instance() {
    return reinterpret_cast<const MsgList*>(
               &_MsgList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MsgList& a, MsgList& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgList* New() const final {
    return CreateMaybeMessage<MsgList>(nullptr);
  }

  MsgList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgList& from);
  void MergeFrom(const MsgList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.MsgList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgListFieldNumber = 3,
  };
  // repeated .KIDV.msgContent msgList = 3;
  int msglist_size() const;
  private:
  int _internal_msglist_size() const;
  public:
  void clear_msglist();
  ::KIDV::msgContent* mutable_msglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::msgContent >*
      mutable_msglist();
  private:
  const ::KIDV::msgContent& _internal_msglist(int index) const;
  ::KIDV::msgContent* _internal_add_msglist();
  public:
  const ::KIDV::msgContent& msglist(int index) const;
  ::KIDV::msgContent* add_msglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::msgContent >&
      msglist() const;

  // @@protoc_insertion_point(class_scope:KIDV.MsgList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::msgContent > msglist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class msgContent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KIDV.msgContent) */ {
 public:
  msgContent();
  virtual ~msgContent();

  msgContent(const msgContent& from);
  msgContent(msgContent&& from) noexcept
    : msgContent() {
    *this = ::std::move(from);
  }

  inline msgContent& operator=(const msgContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline msgContent& operator=(msgContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const msgContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msgContent* internal_default_instance() {
    return reinterpret_cast<const msgContent*>(
               &_msgContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(msgContent& a, msgContent& b) {
    a.Swap(&b);
  }
  inline void Swap(msgContent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline msgContent* New() const final {
    return CreateMaybeMessage<msgContent>(nullptr);
  }

  msgContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<msgContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const msgContent& from);
  void MergeFrom(const msgContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msgContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KIDV.msgContent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:KIDV.msgContent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseMessage

// .KIDV.BaseMessage.MsgType msgType = 1;
inline void BaseMessage::clear_msgtype() {
  msgtype_ = 0;
}
inline ::KIDV::BaseMessage_MsgType BaseMessage::_internal_msgtype() const {
  return static_cast< ::KIDV::BaseMessage_MsgType >(msgtype_);
}
inline ::KIDV::BaseMessage_MsgType BaseMessage::msgtype() const {
  // @@protoc_insertion_point(field_get:KIDV.BaseMessage.msgType)
  return _internal_msgtype();
}
inline void BaseMessage::_internal_set_msgtype(::KIDV::BaseMessage_MsgType value) {
  
  msgtype_ = value;
}
inline void BaseMessage::set_msgtype(::KIDV::BaseMessage_MsgType value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:KIDV.BaseMessage.msgType)
}

// .google.protobuf.Any params = 2;
inline bool BaseMessage::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool BaseMessage::has_params() const {
  return _internal_has_params();
}
inline const PROTOBUF_NAMESPACE_ID::Any& BaseMessage::_internal_params() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& BaseMessage::params() const {
  // @@protoc_insertion_point(field_get:KIDV.BaseMessage.params)
  return _internal_params();
}
inline PROTOBUF_NAMESPACE_ID::Any* BaseMessage::release_params() {
  // @@protoc_insertion_point(field_release:KIDV.BaseMessage.params)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = params_;
  params_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* BaseMessage::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    params_ = p;
  }
  return params_;
}
inline PROTOBUF_NAMESPACE_ID::Any* BaseMessage::mutable_params() {
  // @@protoc_insertion_point(field_mutable:KIDV.BaseMessage.params)
  return _internal_mutable_params();
}
inline void BaseMessage::set_allocated_params(PROTOBUF_NAMESPACE_ID::Any* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:KIDV.BaseMessage.params)
}

// -------------------------------------------------------------------

// serverLauch

// .KIDV.serverLauch.MsgType msgType = 1;
inline void serverLauch::clear_msgtype() {
  msgtype_ = 0;
}
inline ::KIDV::serverLauch_MsgType serverLauch::_internal_msgtype() const {
  return static_cast< ::KIDV::serverLauch_MsgType >(msgtype_);
}
inline ::KIDV::serverLauch_MsgType serverLauch::msgtype() const {
  // @@protoc_insertion_point(field_get:KIDV.serverLauch.msgType)
  return _internal_msgtype();
}
inline void serverLauch::_internal_set_msgtype(::KIDV::serverLauch_MsgType value) {
  
  msgtype_ = value;
}
inline void serverLauch::set_msgtype(::KIDV::serverLauch_MsgType value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:KIDV.serverLauch.msgType)
}

// .google.protobuf.Any params = 2;
inline bool serverLauch::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool serverLauch::has_params() const {
  return _internal_has_params();
}
inline const PROTOBUF_NAMESPACE_ID::Any& serverLauch::_internal_params() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& serverLauch::params() const {
  // @@protoc_insertion_point(field_get:KIDV.serverLauch.params)
  return _internal_params();
}
inline PROTOBUF_NAMESPACE_ID::Any* serverLauch::release_params() {
  // @@protoc_insertion_point(field_release:KIDV.serverLauch.params)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = params_;
  params_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* serverLauch::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    params_ = p;
  }
  return params_;
}
inline PROTOBUF_NAMESPACE_ID::Any* serverLauch::mutable_params() {
  // @@protoc_insertion_point(field_mutable:KIDV.serverLauch.params)
  return _internal_mutable_params();
}
inline void serverLauch::set_allocated_params(PROTOBUF_NAMESPACE_ID::Any* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:KIDV.serverLauch.params)
}

// -------------------------------------------------------------------

// Config

// string IP = 1;
inline void Config::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Config::ip() const {
  // @@protoc_insertion_point(field_get:KIDV.Config.IP)
  return _internal_ip();
}
inline void Config::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:KIDV.Config.IP)
}
inline std::string* Config::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:KIDV.Config.IP)
  return _internal_mutable_ip();
}
inline const std::string& Config::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void Config::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.Config.IP)
}
inline void Config::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.Config.IP)
}
inline void Config::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.Config.IP)
}
inline std::string* Config::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config::release_ip() {
  // @@protoc_insertion_point(field_release:KIDV.Config.IP)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:KIDV.Config.IP)
}

// string port = 2;
inline void Config::clear_port() {
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Config::port() const {
  // @@protoc_insertion_point(field_get:KIDV.Config.port)
  return _internal_port();
}
inline void Config::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:KIDV.Config.port)
}
inline std::string* Config::mutable_port() {
  // @@protoc_insertion_point(field_mutable:KIDV.Config.port)
  return _internal_mutable_port();
}
inline const std::string& Config::_internal_port() const {
  return port_.GetNoArena();
}
inline void Config::_internal_set_port(const std::string& value) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Config::set_port(std::string&& value) {
  
  port_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.Config.port)
}
inline void Config::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.Config.port)
}
inline void Config::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.Config.port)
}
inline std::string* Config::_internal_mutable_port() {
  
  return port_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Config::release_port() {
  // @@protoc_insertion_point(field_release:KIDV.Config.port)
  
  return port_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:KIDV.Config.port)
}

// bool isSave = 3;
inline void Config::clear_issave() {
  issave_ = false;
}
inline bool Config::_internal_issave() const {
  return issave_;
}
inline bool Config::issave() const {
  // @@protoc_insertion_point(field_get:KIDV.Config.isSave)
  return _internal_issave();
}
inline void Config::_internal_set_issave(bool value) {
  
  issave_ = value;
}
inline void Config::set_issave(bool value) {
  _internal_set_issave(value);
  // @@protoc_insertion_point(field_set:KIDV.Config.isSave)
}

// int32 returnValue = 4;
inline void Config::clear_returnvalue() {
  returnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::_internal_returnvalue() const {
  return returnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Config::returnvalue() const {
  // @@protoc_insertion_point(field_get:KIDV.Config.returnValue)
  return _internal_returnvalue();
}
inline void Config::_internal_set_returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  returnvalue_ = value;
}
inline void Config::set_returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_returnvalue(value);
  // @@protoc_insertion_point(field_set:KIDV.Config.returnValue)
}

// -------------------------------------------------------------------

// Login

// int32 loginMethod = 1;
inline void Login::clear_loginmethod() {
  loginmethod_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login::_internal_loginmethod() const {
  return loginmethod_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login::loginmethod() const {
  // @@protoc_insertion_point(field_get:KIDV.Login.loginMethod)
  return _internal_loginmethod();
}
inline void Login::_internal_set_loginmethod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loginmethod_ = value;
}
inline void Login::set_loginmethod(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_loginmethod(value);
  // @@protoc_insertion_point(field_set:KIDV.Login.loginMethod)
}

// string userName = 2;
inline void Login::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login::username() const {
  // @@protoc_insertion_point(field_get:KIDV.Login.userName)
  return _internal_username();
}
inline void Login::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:KIDV.Login.userName)
}
inline std::string* Login::mutable_username() {
  // @@protoc_insertion_point(field_mutable:KIDV.Login.userName)
  return _internal_mutable_username();
}
inline const std::string& Login::_internal_username() const {
  return username_.GetNoArena();
}
inline void Login::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.Login.userName)
}
inline void Login::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.Login.userName)
}
inline void Login::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.Login.userName)
}
inline std::string* Login::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login::release_username() {
  // @@protoc_insertion_point(field_release:KIDV.Login.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:KIDV.Login.userName)
}

// string password = 3;
inline void Login::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:KIDV.Login.password)
  return _internal_password();
}
inline void Login::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:KIDV.Login.password)
}
inline std::string* Login::mutable_password() {
  // @@protoc_insertion_point(field_mutable:KIDV.Login.password)
  return _internal_mutable_password();
}
inline const std::string& Login::_internal_password() const {
  return password_.GetNoArena();
}
inline void Login::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.Login.password)
}
inline void Login::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.Login.password)
}
inline void Login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.Login.password)
}
inline std::string* Login::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login::release_password() {
  // @@protoc_insertion_point(field_release:KIDV.Login.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:KIDV.Login.password)
}

// string result = 4;
inline void Login::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Login::result() const {
  // @@protoc_insertion_point(field_get:KIDV.Login.result)
  return _internal_result();
}
inline void Login::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:KIDV.Login.result)
}
inline std::string* Login::mutable_result() {
  // @@protoc_insertion_point(field_mutable:KIDV.Login.result)
  return _internal_mutable_result();
}
inline const std::string& Login::_internal_result() const {
  return result_.GetNoArena();
}
inline void Login::_internal_set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Login::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.Login.result)
}
inline void Login::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.Login.result)
}
inline void Login::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.Login.result)
}
inline std::string* Login::_internal_mutable_result() {
  
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Login::release_result() {
  // @@protoc_insertion_point(field_release:KIDV.Login.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:KIDV.Login.result)
}

// -------------------------------------------------------------------

// Toolbar

// int32 msgType = 1;
inline void Toolbar::clear_msgtype() {
  msgtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Toolbar::_internal_msgtype() const {
  return msgtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Toolbar::msgtype() const {
  // @@protoc_insertion_point(field_get:KIDV.Toolbar.msgType)
  return _internal_msgtype();
}
inline void Toolbar::_internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgtype_ = value;
}
inline void Toolbar::set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:KIDV.Toolbar.msgType)
}

// string param = 2;
inline void Toolbar::clear_param() {
  param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Toolbar::param() const {
  // @@protoc_insertion_point(field_get:KIDV.Toolbar.param)
  return _internal_param();
}
inline void Toolbar::set_param(const std::string& value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:KIDV.Toolbar.param)
}
inline std::string* Toolbar::mutable_param() {
  // @@protoc_insertion_point(field_mutable:KIDV.Toolbar.param)
  return _internal_mutable_param();
}
inline const std::string& Toolbar::_internal_param() const {
  return param_.GetNoArena();
}
inline void Toolbar::_internal_set_param(const std::string& value) {
  
  param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Toolbar::set_param(std::string&& value) {
  
  param_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.Toolbar.param)
}
inline void Toolbar::set_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.Toolbar.param)
}
inline void Toolbar::set_param(const char* value, size_t size) {
  
  param_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.Toolbar.param)
}
inline std::string* Toolbar::_internal_mutable_param() {
  
  return param_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Toolbar::release_param() {
  // @@protoc_insertion_point(field_release:KIDV.Toolbar.param)
  
  return param_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Toolbar::set_allocated_param(std::string* param) {
  if (param != nullptr) {
    
  } else {
    
  }
  param_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param);
  // @@protoc_insertion_point(field_set_allocated:KIDV.Toolbar.param)
}

// repeated .KIDV.snapshoot snapshootList = 3;
inline int Toolbar::_internal_snapshootlist_size() const {
  return snapshootlist_.size();
}
inline int Toolbar::snapshootlist_size() const {
  return _internal_snapshootlist_size();
}
inline void Toolbar::clear_snapshootlist() {
  snapshootlist_.Clear();
}
inline ::KIDV::snapshoot* Toolbar::mutable_snapshootlist(int index) {
  // @@protoc_insertion_point(field_mutable:KIDV.Toolbar.snapshootList)
  return snapshootlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::snapshoot >*
Toolbar::mutable_snapshootlist() {
  // @@protoc_insertion_point(field_mutable_list:KIDV.Toolbar.snapshootList)
  return &snapshootlist_;
}
inline const ::KIDV::snapshoot& Toolbar::_internal_snapshootlist(int index) const {
  return snapshootlist_.Get(index);
}
inline const ::KIDV::snapshoot& Toolbar::snapshootlist(int index) const {
  // @@protoc_insertion_point(field_get:KIDV.Toolbar.snapshootList)
  return _internal_snapshootlist(index);
}
inline ::KIDV::snapshoot* Toolbar::_internal_add_snapshootlist() {
  return snapshootlist_.Add();
}
inline ::KIDV::snapshoot* Toolbar::add_snapshootlist() {
  // @@protoc_insertion_point(field_add:KIDV.Toolbar.snapshootList)
  return _internal_add_snapshootlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::snapshoot >&
Toolbar::snapshootlist() const {
  // @@protoc_insertion_point(field_list:KIDV.Toolbar.snapshootList)
  return snapshootlist_;
}

// int32 returnValue = 4;
inline void Toolbar::clear_returnvalue() {
  returnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Toolbar::_internal_returnvalue() const {
  return returnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Toolbar::returnvalue() const {
  // @@protoc_insertion_point(field_get:KIDV.Toolbar.returnValue)
  return _internal_returnvalue();
}
inline void Toolbar::_internal_set_returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  returnvalue_ = value;
}
inline void Toolbar::set_returnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_returnvalue(value);
  // @@protoc_insertion_point(field_set:KIDV.Toolbar.returnValue)
}

// -------------------------------------------------------------------

// ChangePassword

// string userName = 1;
inline void ChangePassword::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChangePassword::username() const {
  // @@protoc_insertion_point(field_get:KIDV.ChangePassword.userName)
  return _internal_username();
}
inline void ChangePassword::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:KIDV.ChangePassword.userName)
}
inline std::string* ChangePassword::mutable_username() {
  // @@protoc_insertion_point(field_mutable:KIDV.ChangePassword.userName)
  return _internal_mutable_username();
}
inline const std::string& ChangePassword::_internal_username() const {
  return username_.GetNoArena();
}
inline void ChangePassword::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChangePassword::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.ChangePassword.userName)
}
inline void ChangePassword::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.ChangePassword.userName)
}
inline void ChangePassword::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.ChangePassword.userName)
}
inline std::string* ChangePassword::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChangePassword::release_username() {
  // @@protoc_insertion_point(field_release:KIDV.ChangePassword.userName)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChangePassword::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:KIDV.ChangePassword.userName)
}

// string oldPassword = 2;
inline void ChangePassword::clear_oldpassword() {
  oldpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChangePassword::oldpassword() const {
  // @@protoc_insertion_point(field_get:KIDV.ChangePassword.oldPassword)
  return _internal_oldpassword();
}
inline void ChangePassword::set_oldpassword(const std::string& value) {
  _internal_set_oldpassword(value);
  // @@protoc_insertion_point(field_set:KIDV.ChangePassword.oldPassword)
}
inline std::string* ChangePassword::mutable_oldpassword() {
  // @@protoc_insertion_point(field_mutable:KIDV.ChangePassword.oldPassword)
  return _internal_mutable_oldpassword();
}
inline const std::string& ChangePassword::_internal_oldpassword() const {
  return oldpassword_.GetNoArena();
}
inline void ChangePassword::_internal_set_oldpassword(const std::string& value) {
  
  oldpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChangePassword::set_oldpassword(std::string&& value) {
  
  oldpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.ChangePassword.oldPassword)
}
inline void ChangePassword::set_oldpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oldpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.ChangePassword.oldPassword)
}
inline void ChangePassword::set_oldpassword(const char* value, size_t size) {
  
  oldpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.ChangePassword.oldPassword)
}
inline std::string* ChangePassword::_internal_mutable_oldpassword() {
  
  return oldpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChangePassword::release_oldpassword() {
  // @@protoc_insertion_point(field_release:KIDV.ChangePassword.oldPassword)
  
  return oldpassword_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChangePassword::set_allocated_oldpassword(std::string* oldpassword) {
  if (oldpassword != nullptr) {
    
  } else {
    
  }
  oldpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldpassword);
  // @@protoc_insertion_point(field_set_allocated:KIDV.ChangePassword.oldPassword)
}

// string newPassword = 3;
inline void ChangePassword::clear_newpassword() {
  newpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChangePassword::newpassword() const {
  // @@protoc_insertion_point(field_get:KIDV.ChangePassword.newPassword)
  return _internal_newpassword();
}
inline void ChangePassword::set_newpassword(const std::string& value) {
  _internal_set_newpassword(value);
  // @@protoc_insertion_point(field_set:KIDV.ChangePassword.newPassword)
}
inline std::string* ChangePassword::mutable_newpassword() {
  // @@protoc_insertion_point(field_mutable:KIDV.ChangePassword.newPassword)
  return _internal_mutable_newpassword();
}
inline const std::string& ChangePassword::_internal_newpassword() const {
  return newpassword_.GetNoArena();
}
inline void ChangePassword::_internal_set_newpassword(const std::string& value) {
  
  newpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChangePassword::set_newpassword(std::string&& value) {
  
  newpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.ChangePassword.newPassword)
}
inline void ChangePassword::set_newpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.ChangePassword.newPassword)
}
inline void ChangePassword::set_newpassword(const char* value, size_t size) {
  
  newpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.ChangePassword.newPassword)
}
inline std::string* ChangePassword::_internal_mutable_newpassword() {
  
  return newpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChangePassword::release_newpassword() {
  // @@protoc_insertion_point(field_release:KIDV.ChangePassword.newPassword)
  
  return newpassword_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChangePassword::set_allocated_newpassword(std::string* newpassword) {
  if (newpassword != nullptr) {
    
  } else {
    
  }
  newpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newpassword);
  // @@protoc_insertion_point(field_set_allocated:KIDV.ChangePassword.newPassword)
}

// string newPasswordTwo = 4;
inline void ChangePassword::clear_newpasswordtwo() {
  newpasswordtwo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChangePassword::newpasswordtwo() const {
  // @@protoc_insertion_point(field_get:KIDV.ChangePassword.newPasswordTwo)
  return _internal_newpasswordtwo();
}
inline void ChangePassword::set_newpasswordtwo(const std::string& value) {
  _internal_set_newpasswordtwo(value);
  // @@protoc_insertion_point(field_set:KIDV.ChangePassword.newPasswordTwo)
}
inline std::string* ChangePassword::mutable_newpasswordtwo() {
  // @@protoc_insertion_point(field_mutable:KIDV.ChangePassword.newPasswordTwo)
  return _internal_mutable_newpasswordtwo();
}
inline const std::string& ChangePassword::_internal_newpasswordtwo() const {
  return newpasswordtwo_.GetNoArena();
}
inline void ChangePassword::_internal_set_newpasswordtwo(const std::string& value) {
  
  newpasswordtwo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChangePassword::set_newpasswordtwo(std::string&& value) {
  
  newpasswordtwo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.ChangePassword.newPasswordTwo)
}
inline void ChangePassword::set_newpasswordtwo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newpasswordtwo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.ChangePassword.newPasswordTwo)
}
inline void ChangePassword::set_newpasswordtwo(const char* value, size_t size) {
  
  newpasswordtwo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.ChangePassword.newPasswordTwo)
}
inline std::string* ChangePassword::_internal_mutable_newpasswordtwo() {
  
  return newpasswordtwo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChangePassword::release_newpasswordtwo() {
  // @@protoc_insertion_point(field_release:KIDV.ChangePassword.newPasswordTwo)
  
  return newpasswordtwo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChangePassword::set_allocated_newpasswordtwo(std::string* newpasswordtwo) {
  if (newpasswordtwo != nullptr) {
    
  } else {
    
  }
  newpasswordtwo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newpasswordtwo);
  // @@protoc_insertion_point(field_set_allocated:KIDV.ChangePassword.newPasswordTwo)
}

// int32 changeResult = 5;
inline void ChangePassword::clear_changeresult() {
  changeresult_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangePassword::_internal_changeresult() const {
  return changeresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangePassword::changeresult() const {
  // @@protoc_insertion_point(field_get:KIDV.ChangePassword.changeResult)
  return _internal_changeresult();
}
inline void ChangePassword::_internal_set_changeresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  changeresult_ = value;
}
inline void ChangePassword::set_changeresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_changeresult(value);
  // @@protoc_insertion_point(field_set:KIDV.ChangePassword.changeResult)
}

// -------------------------------------------------------------------

// VMManagge

// int32 uuid = 1;
inline void VMManagge::clear_uuid() {
  uuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VMManagge::_internal_uuid() const {
  return uuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VMManagge::uuid() const {
  // @@protoc_insertion_point(field_get:KIDV.VMManagge.uuid)
  return _internal_uuid();
}
inline void VMManagge::_internal_set_uuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uuid_ = value;
}
inline void VMManagge::set_uuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:KIDV.VMManagge.uuid)
}

// string machineName = 2;
inline void VMManagge::clear_machinename() {
  machinename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VMManagge::machinename() const {
  // @@protoc_insertion_point(field_get:KIDV.VMManagge.machineName)
  return _internal_machinename();
}
inline void VMManagge::set_machinename(const std::string& value) {
  _internal_set_machinename(value);
  // @@protoc_insertion_point(field_set:KIDV.VMManagge.machineName)
}
inline std::string* VMManagge::mutable_machinename() {
  // @@protoc_insertion_point(field_mutable:KIDV.VMManagge.machineName)
  return _internal_mutable_machinename();
}
inline const std::string& VMManagge::_internal_machinename() const {
  return machinename_.GetNoArena();
}
inline void VMManagge::_internal_set_machinename(const std::string& value) {
  
  machinename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VMManagge::set_machinename(std::string&& value) {
  
  machinename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.VMManagge.machineName)
}
inline void VMManagge::set_machinename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  machinename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.VMManagge.machineName)
}
inline void VMManagge::set_machinename(const char* value, size_t size) {
  
  machinename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.VMManagge.machineName)
}
inline std::string* VMManagge::_internal_mutable_machinename() {
  
  return machinename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VMManagge::release_machinename() {
  // @@protoc_insertion_point(field_release:KIDV.VMManagge.machineName)
  
  return machinename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VMManagge::set_allocated_machinename(std::string* machinename) {
  if (machinename != nullptr) {
    
  } else {
    
  }
  machinename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machinename);
  // @@protoc_insertion_point(field_set_allocated:KIDV.VMManagge.machineName)
}

// int32 msgType = 3;
inline void VMManagge::clear_msgtype() {
  msgtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VMManagge::_internal_msgtype() const {
  return msgtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VMManagge::msgtype() const {
  // @@protoc_insertion_point(field_get:KIDV.VMManagge.msgType)
  return _internal_msgtype();
}
inline void VMManagge::_internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgtype_ = value;
}
inline void VMManagge::set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:KIDV.VMManagge.msgType)
}

// int32 downloadProgress = 4;
inline void VMManagge::clear_downloadprogress() {
  downloadprogress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VMManagge::_internal_downloadprogress() const {
  return downloadprogress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VMManagge::downloadprogress() const {
  // @@protoc_insertion_point(field_get:KIDV.VMManagge.downloadProgress)
  return _internal_downloadprogress();
}
inline void VMManagge::_internal_set_downloadprogress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  downloadprogress_ = value;
}
inline void VMManagge::set_downloadprogress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_downloadprogress(value);
  // @@protoc_insertion_point(field_set:KIDV.VMManagge.downloadProgress)
}

// string newMachineName = 5;
inline void VMManagge::clear_newmachinename() {
  newmachinename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VMManagge::newmachinename() const {
  // @@protoc_insertion_point(field_get:KIDV.VMManagge.newMachineName)
  return _internal_newmachinename();
}
inline void VMManagge::set_newmachinename(const std::string& value) {
  _internal_set_newmachinename(value);
  // @@protoc_insertion_point(field_set:KIDV.VMManagge.newMachineName)
}
inline std::string* VMManagge::mutable_newmachinename() {
  // @@protoc_insertion_point(field_mutable:KIDV.VMManagge.newMachineName)
  return _internal_mutable_newmachinename();
}
inline const std::string& VMManagge::_internal_newmachinename() const {
  return newmachinename_.GetNoArena();
}
inline void VMManagge::_internal_set_newmachinename(const std::string& value) {
  
  newmachinename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VMManagge::set_newmachinename(std::string&& value) {
  
  newmachinename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.VMManagge.newMachineName)
}
inline void VMManagge::set_newmachinename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newmachinename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.VMManagge.newMachineName)
}
inline void VMManagge::set_newmachinename(const char* value, size_t size) {
  
  newmachinename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.VMManagge.newMachineName)
}
inline std::string* VMManagge::_internal_mutable_newmachinename() {
  
  return newmachinename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VMManagge::release_newmachinename() {
  // @@protoc_insertion_point(field_release:KIDV.VMManagge.newMachineName)
  
  return newmachinename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VMManagge::set_allocated_newmachinename(std::string* newmachinename) {
  if (newmachinename != nullptr) {
    
  } else {
    
  }
  newmachinename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newmachinename);
  // @@protoc_insertion_point(field_set_allocated:KIDV.VMManagge.newMachineName)
}

// -------------------------------------------------------------------

// snapshootManage

// int32 msgType = 1;
inline void snapshootManage::clear_msgtype() {
  msgtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 snapshootManage::_internal_msgtype() const {
  return msgtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 snapshootManage::msgtype() const {
  // @@protoc_insertion_point(field_get:KIDV.snapshootManage.msgType)
  return _internal_msgtype();
}
inline void snapshootManage::_internal_set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msgtype_ = value;
}
inline void snapshootManage::set_msgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:KIDV.snapshootManage.msgType)
}

// .google.protobuf.Any params = 2;
inline bool snapshootManage::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool snapshootManage::has_params() const {
  return _internal_has_params();
}
inline const PROTOBUF_NAMESPACE_ID::Any& snapshootManage::_internal_params() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& snapshootManage::params() const {
  // @@protoc_insertion_point(field_get:KIDV.snapshootManage.params)
  return _internal_params();
}
inline PROTOBUF_NAMESPACE_ID::Any* snapshootManage::release_params() {
  // @@protoc_insertion_point(field_release:KIDV.snapshootManage.params)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = params_;
  params_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* snapshootManage::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    params_ = p;
  }
  return params_;
}
inline PROTOBUF_NAMESPACE_ID::Any* snapshootManage::mutable_params() {
  // @@protoc_insertion_point(field_mutable:KIDV.snapshootManage.params)
  return _internal_mutable_params();
}
inline void snapshootManage::set_allocated_params(PROTOBUF_NAMESPACE_ID::Any* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:KIDV.snapshootManage.params)
}

// -------------------------------------------------------------------

// snapshoot

// string uuid = 1;
inline void snapshoot::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& snapshoot::uuid() const {
  // @@protoc_insertion_point(field_get:KIDV.snapshoot.uuid)
  return _internal_uuid();
}
inline void snapshoot::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:KIDV.snapshoot.uuid)
}
inline std::string* snapshoot::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:KIDV.snapshoot.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& snapshoot::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void snapshoot::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void snapshoot::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.snapshoot.uuid)
}
inline void snapshoot::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.snapshoot.uuid)
}
inline void snapshoot::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.snapshoot.uuid)
}
inline std::string* snapshoot::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* snapshoot::release_uuid() {
  // @@protoc_insertion_point(field_release:KIDV.snapshoot.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void snapshoot::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:KIDV.snapshoot.uuid)
}

// int32 id = 2;
inline void snapshoot::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 snapshoot::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 snapshoot::id() const {
  // @@protoc_insertion_point(field_get:KIDV.snapshoot.id)
  return _internal_id();
}
inline void snapshoot::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void snapshoot::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:KIDV.snapshoot.id)
}

// string snapshootName = 3;
inline void snapshoot::clear_snapshootname() {
  snapshootname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& snapshoot::snapshootname() const {
  // @@protoc_insertion_point(field_get:KIDV.snapshoot.snapshootName)
  return _internal_snapshootname();
}
inline void snapshoot::set_snapshootname(const std::string& value) {
  _internal_set_snapshootname(value);
  // @@protoc_insertion_point(field_set:KIDV.snapshoot.snapshootName)
}
inline std::string* snapshoot::mutable_snapshootname() {
  // @@protoc_insertion_point(field_mutable:KIDV.snapshoot.snapshootName)
  return _internal_mutable_snapshootname();
}
inline const std::string& snapshoot::_internal_snapshootname() const {
  return snapshootname_.GetNoArena();
}
inline void snapshoot::_internal_set_snapshootname(const std::string& value) {
  
  snapshootname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void snapshoot::set_snapshootname(std::string&& value) {
  
  snapshootname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.snapshoot.snapshootName)
}
inline void snapshoot::set_snapshootname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snapshootname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.snapshoot.snapshootName)
}
inline void snapshoot::set_snapshootname(const char* value, size_t size) {
  
  snapshootname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.snapshoot.snapshootName)
}
inline std::string* snapshoot::_internal_mutable_snapshootname() {
  
  return snapshootname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* snapshoot::release_snapshootname() {
  // @@protoc_insertion_point(field_release:KIDV.snapshoot.snapshootName)
  
  return snapshootname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void snapshoot::set_allocated_snapshootname(std::string* snapshootname) {
  if (snapshootname != nullptr) {
    
  } else {
    
  }
  snapshootname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshootname);
  // @@protoc_insertion_point(field_set_allocated:KIDV.snapshoot.snapshootName)
}

// string createTime = 4;
inline void snapshoot::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& snapshoot::createtime() const {
  // @@protoc_insertion_point(field_get:KIDV.snapshoot.createTime)
  return _internal_createtime();
}
inline void snapshoot::set_createtime(const std::string& value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:KIDV.snapshoot.createTime)
}
inline std::string* snapshoot::mutable_createtime() {
  // @@protoc_insertion_point(field_mutable:KIDV.snapshoot.createTime)
  return _internal_mutable_createtime();
}
inline const std::string& snapshoot::_internal_createtime() const {
  return createtime_.GetNoArena();
}
inline void snapshoot::_internal_set_createtime(const std::string& value) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void snapshoot::set_createtime(std::string&& value) {
  
  createtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.snapshoot.createTime)
}
inline void snapshoot::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.snapshoot.createTime)
}
inline void snapshoot::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.snapshoot.createTime)
}
inline std::string* snapshoot::_internal_mutable_createtime() {
  
  return createtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* snapshoot::release_createtime() {
  // @@protoc_insertion_point(field_release:KIDV.snapshoot.createTime)
  
  return createtime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void snapshoot::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:KIDV.snapshoot.createTime)
}

// string snapshootDescribe = 5;
inline void snapshoot::clear_snapshootdescribe() {
  snapshootdescribe_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& snapshoot::snapshootdescribe() const {
  // @@protoc_insertion_point(field_get:KIDV.snapshoot.snapshootDescribe)
  return _internal_snapshootdescribe();
}
inline void snapshoot::set_snapshootdescribe(const std::string& value) {
  _internal_set_snapshootdescribe(value);
  // @@protoc_insertion_point(field_set:KIDV.snapshoot.snapshootDescribe)
}
inline std::string* snapshoot::mutable_snapshootdescribe() {
  // @@protoc_insertion_point(field_mutable:KIDV.snapshoot.snapshootDescribe)
  return _internal_mutable_snapshootdescribe();
}
inline const std::string& snapshoot::_internal_snapshootdescribe() const {
  return snapshootdescribe_.GetNoArena();
}
inline void snapshoot::_internal_set_snapshootdescribe(const std::string& value) {
  
  snapshootdescribe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void snapshoot::set_snapshootdescribe(std::string&& value) {
  
  snapshootdescribe_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.snapshoot.snapshootDescribe)
}
inline void snapshoot::set_snapshootdescribe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snapshootdescribe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.snapshoot.snapshootDescribe)
}
inline void snapshoot::set_snapshootdescribe(const char* value, size_t size) {
  
  snapshootdescribe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.snapshoot.snapshootDescribe)
}
inline std::string* snapshoot::_internal_mutable_snapshootdescribe() {
  
  return snapshootdescribe_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* snapshoot::release_snapshootdescribe() {
  // @@protoc_insertion_point(field_release:KIDV.snapshoot.snapshootDescribe)
  
  return snapshootdescribe_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void snapshoot::set_allocated_snapshootdescribe(std::string* snapshootdescribe) {
  if (snapshootdescribe != nullptr) {
    
  } else {
    
  }
  snapshootdescribe_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshootdescribe);
  // @@protoc_insertion_point(field_set_allocated:KIDV.snapshoot.snapshootDescribe)
}

// -------------------------------------------------------------------

// remainClientLaunch

// int32 msg = 1;
inline void remainClientLaunch::clear_msg() {
  msg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 remainClientLaunch::_internal_msg() const {
  return msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 remainClientLaunch::msg() const {
  // @@protoc_insertion_point(field_get:KIDV.remainClientLaunch.msg)
  return _internal_msg();
}
inline void remainClientLaunch::_internal_set_msg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_ = value;
}
inline void remainClientLaunch::set_msg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:KIDV.remainClientLaunch.msg)
}

// -------------------------------------------------------------------

// loginType

// int32 logintype = 1;
inline void loginType::clear_logintype() {
  logintype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loginType::_internal_logintype() const {
  return logintype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loginType::logintype() const {
  // @@protoc_insertion_point(field_get:KIDV.loginType.logintype)
  return _internal_logintype();
}
inline void loginType::_internal_set_logintype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logintype_ = value;
}
inline void loginType::set_logintype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logintype(value);
  // @@protoc_insertion_point(field_set:KIDV.loginType.logintype)
}

// -------------------------------------------------------------------

// Hint

// int32 hintMsgType = 1;
inline void Hint::clear_hintmsgtype() {
  hintmsgtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Hint::_internal_hintmsgtype() const {
  return hintmsgtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Hint::hintmsgtype() const {
  // @@protoc_insertion_point(field_get:KIDV.Hint.hintMsgType)
  return _internal_hintmsgtype();
}
inline void Hint::_internal_set_hintmsgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hintmsgtype_ = value;
}
inline void Hint::set_hintmsgtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hintmsgtype(value);
  // @@protoc_insertion_point(field_set:KIDV.Hint.hintMsgType)
}

// string hintMsgContent = 2;
inline void Hint::clear_hintmsgcontent() {
  hintmsgcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Hint::hintmsgcontent() const {
  // @@protoc_insertion_point(field_get:KIDV.Hint.hintMsgContent)
  return _internal_hintmsgcontent();
}
inline void Hint::set_hintmsgcontent(const std::string& value) {
  _internal_set_hintmsgcontent(value);
  // @@protoc_insertion_point(field_set:KIDV.Hint.hintMsgContent)
}
inline std::string* Hint::mutable_hintmsgcontent() {
  // @@protoc_insertion_point(field_mutable:KIDV.Hint.hintMsgContent)
  return _internal_mutable_hintmsgcontent();
}
inline const std::string& Hint::_internal_hintmsgcontent() const {
  return hintmsgcontent_.GetNoArena();
}
inline void Hint::_internal_set_hintmsgcontent(const std::string& value) {
  
  hintmsgcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Hint::set_hintmsgcontent(std::string&& value) {
  
  hintmsgcontent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.Hint.hintMsgContent)
}
inline void Hint::set_hintmsgcontent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hintmsgcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.Hint.hintMsgContent)
}
inline void Hint::set_hintmsgcontent(const char* value, size_t size) {
  
  hintmsgcontent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.Hint.hintMsgContent)
}
inline std::string* Hint::_internal_mutable_hintmsgcontent() {
  
  return hintmsgcontent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Hint::release_hintmsgcontent() {
  // @@protoc_insertion_point(field_release:KIDV.Hint.hintMsgContent)
  
  return hintmsgcontent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Hint::set_allocated_hintmsgcontent(std::string* hintmsgcontent) {
  if (hintmsgcontent != nullptr) {
    
  } else {
    
  }
  hintmsgcontent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hintmsgcontent);
  // @@protoc_insertion_point(field_set_allocated:KIDV.Hint.hintMsgContent)
}

// int32 strongHintType = 3;
inline void Hint::clear_stronghinttype() {
  stronghinttype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Hint::_internal_stronghinttype() const {
  return stronghinttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Hint::stronghinttype() const {
  // @@protoc_insertion_point(field_get:KIDV.Hint.strongHintType)
  return _internal_stronghinttype();
}
inline void Hint::_internal_set_stronghinttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stronghinttype_ = value;
}
inline void Hint::set_stronghinttype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stronghinttype(value);
  // @@protoc_insertion_point(field_set:KIDV.Hint.strongHintType)
}

// int32 param = 4;
inline void Hint::clear_param() {
  param_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Hint::_internal_param() const {
  return param_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Hint::param() const {
  // @@protoc_insertion_point(field_get:KIDV.Hint.param)
  return _internal_param();
}
inline void Hint::_internal_set_param(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  param_ = value;
}
inline void Hint::set_param(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_param(value);
  // @@protoc_insertion_point(field_set:KIDV.Hint.param)
}

// int32 result = 5;
inline void Hint::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Hint::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Hint::result() const {
  // @@protoc_insertion_point(field_get:KIDV.Hint.result)
  return _internal_result();
}
inline void Hint::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void Hint::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:KIDV.Hint.result)
}

// -------------------------------------------------------------------

// VmList

// repeated .KIDV.VmParam VmList = 1;
inline int VmList::_internal_vmlist_size() const {
  return vmlist_.size();
}
inline int VmList::vmlist_size() const {
  return _internal_vmlist_size();
}
inline void VmList::clear_vmlist() {
  vmlist_.Clear();
}
inline ::KIDV::VmParam* VmList::mutable_vmlist(int index) {
  // @@protoc_insertion_point(field_mutable:KIDV.VmList.VmList)
  return vmlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::VmParam >*
VmList::mutable_vmlist() {
  // @@protoc_insertion_point(field_mutable_list:KIDV.VmList.VmList)
  return &vmlist_;
}
inline const ::KIDV::VmParam& VmList::_internal_vmlist(int index) const {
  return vmlist_.Get(index);
}
inline const ::KIDV::VmParam& VmList::vmlist(int index) const {
  // @@protoc_insertion_point(field_get:KIDV.VmList.VmList)
  return _internal_vmlist(index);
}
inline ::KIDV::VmParam* VmList::_internal_add_vmlist() {
  return vmlist_.Add();
}
inline ::KIDV::VmParam* VmList::add_vmlist() {
  // @@protoc_insertion_point(field_add:KIDV.VmList.VmList)
  return _internal_add_vmlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::VmParam >&
VmList::vmlist() const {
  // @@protoc_insertion_point(field_list:KIDV.VmList.VmList)
  return vmlist_;
}

// -------------------------------------------------------------------

// VmParam

// string UUID = 1;
inline void VmParam::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VmParam::uuid() const {
  // @@protoc_insertion_point(field_get:KIDV.VmParam.UUID)
  return _internal_uuid();
}
inline void VmParam::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:KIDV.VmParam.UUID)
}
inline std::string* VmParam::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:KIDV.VmParam.UUID)
  return _internal_mutable_uuid();
}
inline const std::string& VmParam::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void VmParam::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VmParam::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.VmParam.UUID)
}
inline void VmParam::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.VmParam.UUID)
}
inline void VmParam::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.VmParam.UUID)
}
inline std::string* VmParam::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VmParam::release_uuid() {
  // @@protoc_insertion_point(field_release:KIDV.VmParam.UUID)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VmParam::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:KIDV.VmParam.UUID)
}

// string name = 2;
inline void VmParam::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VmParam::name() const {
  // @@protoc_insertion_point(field_get:KIDV.VmParam.name)
  return _internal_name();
}
inline void VmParam::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:KIDV.VmParam.name)
}
inline std::string* VmParam::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KIDV.VmParam.name)
  return _internal_mutable_name();
}
inline const std::string& VmParam::_internal_name() const {
  return name_.GetNoArena();
}
inline void VmParam::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VmParam::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.VmParam.name)
}
inline void VmParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.VmParam.name)
}
inline void VmParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.VmParam.name)
}
inline std::string* VmParam::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VmParam::release_name() {
  // @@protoc_insertion_point(field_release:KIDV.VmParam.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VmParam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KIDV.VmParam.name)
}

// int32 VmState = 3;
inline void VmParam::clear_vmstate() {
  vmstate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VmParam::_internal_vmstate() const {
  return vmstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VmParam::vmstate() const {
  // @@protoc_insertion_point(field_get:KIDV.VmParam.VmState)
  return _internal_vmstate();
}
inline void VmParam::_internal_set_vmstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vmstate_ = value;
}
inline void VmParam::set_vmstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vmstate(value);
  // @@protoc_insertion_point(field_set:KIDV.VmParam.VmState)
}

// -------------------------------------------------------------------

// MsgList

// repeated .KIDV.msgContent msgList = 3;
inline int MsgList::_internal_msglist_size() const {
  return msglist_.size();
}
inline int MsgList::msglist_size() const {
  return _internal_msglist_size();
}
inline void MsgList::clear_msglist() {
  msglist_.Clear();
}
inline ::KIDV::msgContent* MsgList::mutable_msglist(int index) {
  // @@protoc_insertion_point(field_mutable:KIDV.MsgList.msgList)
  return msglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::msgContent >*
MsgList::mutable_msglist() {
  // @@protoc_insertion_point(field_mutable_list:KIDV.MsgList.msgList)
  return &msglist_;
}
inline const ::KIDV::msgContent& MsgList::_internal_msglist(int index) const {
  return msglist_.Get(index);
}
inline const ::KIDV::msgContent& MsgList::msglist(int index) const {
  // @@protoc_insertion_point(field_get:KIDV.MsgList.msgList)
  return _internal_msglist(index);
}
inline ::KIDV::msgContent* MsgList::_internal_add_msglist() {
  return msglist_.Add();
}
inline ::KIDV::msgContent* MsgList::add_msglist() {
  // @@protoc_insertion_point(field_add:KIDV.MsgList.msgList)
  return _internal_add_msglist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KIDV::msgContent >&
MsgList::msglist() const {
  // @@protoc_insertion_point(field_list:KIDV.MsgList.msgList)
  return msglist_;
}

// -------------------------------------------------------------------

// msgContent

// string msg = 1;
inline void msgContent::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& msgContent::msg() const {
  // @@protoc_insertion_point(field_get:KIDV.msgContent.msg)
  return _internal_msg();
}
inline void msgContent::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:KIDV.msgContent.msg)
}
inline std::string* msgContent::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:KIDV.msgContent.msg)
  return _internal_mutable_msg();
}
inline const std::string& msgContent::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void msgContent::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void msgContent::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KIDV.msgContent.msg)
}
inline void msgContent::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KIDV.msgContent.msg)
}
inline void msgContent::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KIDV.msgContent.msg)
}
inline std::string* msgContent::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* msgContent::release_msg() {
  // @@protoc_insertion_point(field_release:KIDV.msgContent.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void msgContent::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:KIDV.msgContent.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KIDV

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KIDV::BaseMessage_MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KIDV::BaseMessage_MsgType>() {
  return ::KIDV::BaseMessage_MsgType_descriptor();
}
template <> struct is_proto_enum< ::KIDV::serverLauch_MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KIDV::serverLauch_MsgType>() {
  return ::KIDV::serverLauch_MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
