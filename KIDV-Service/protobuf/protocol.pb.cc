// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VmParam_protocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgContent_protocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_snapshoot_protocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
namespace KIDV {
class BaseMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseMessage> _instance;
} _BaseMessage_default_instance_;
class serverLauchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<serverLauch> _instance;
} _serverLauch_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
class LoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Login> _instance;
} _Login_default_instance_;
class ToolbarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Toolbar> _instance;
} _Toolbar_default_instance_;
class ChangePasswordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangePassword> _instance;
} _ChangePassword_default_instance_;
class VMManaggeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VMManagge> _instance;
} _VMManagge_default_instance_;
class snapshootManageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<snapshootManage> _instance;
} _snapshootManage_default_instance_;
class snapshootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<snapshoot> _instance;
} _snapshoot_default_instance_;
class remainClientLaunchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<remainClientLaunch> _instance;
} _remainClientLaunch_default_instance_;
class loginTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<loginType> _instance;
} _loginType_default_instance_;
class HintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hint> _instance;
} _Hint_default_instance_;
class VmListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VmList> _instance;
} _VmList_default_instance_;
class VmParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VmParam> _instance;
} _VmParam_default_instance_;
class MsgListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgList> _instance;
} _MsgList_default_instance_;
class msgContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<msgContent> _instance;
} _msgContent_default_instance_;
}  // namespace KIDV
static void InitDefaultsscc_info_BaseMessage_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_BaseMessage_default_instance_;
    new (ptr) ::KIDV::BaseMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::BaseMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BaseMessage_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BaseMessage_protocol_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_ChangePassword_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_ChangePassword_default_instance_;
    new (ptr) ::KIDV::ChangePassword();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::ChangePassword::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangePassword_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChangePassword_protocol_2eproto}, {}};

static void InitDefaultsscc_info_Config_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_Config_default_instance_;
    new (ptr) ::KIDV::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_protocol_2eproto}, {}};

static void InitDefaultsscc_info_Hint_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_Hint_default_instance_;
    new (ptr) ::KIDV::Hint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::Hint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hint_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hint_protocol_2eproto}, {}};

static void InitDefaultsscc_info_Login_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_Login_default_instance_;
    new (ptr) ::KIDV::Login();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::Login::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Login_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Login_protocol_2eproto}, {}};

static void InitDefaultsscc_info_MsgList_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_MsgList_default_instance_;
    new (ptr) ::KIDV::MsgList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::MsgList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgList_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgList_protocol_2eproto}, {
      &scc_info_msgContent_protocol_2eproto.base,}};

static void InitDefaultsscc_info_Toolbar_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_Toolbar_default_instance_;
    new (ptr) ::KIDV::Toolbar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::Toolbar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Toolbar_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Toolbar_protocol_2eproto}, {
      &scc_info_snapshoot_protocol_2eproto.base,}};

static void InitDefaultsscc_info_VMManagge_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_VMManagge_default_instance_;
    new (ptr) ::KIDV::VMManagge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::VMManagge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VMManagge_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VMManagge_protocol_2eproto}, {}};

static void InitDefaultsscc_info_VmList_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_VmList_default_instance_;
    new (ptr) ::KIDV::VmList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::VmList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VmList_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VmList_protocol_2eproto}, {
      &scc_info_VmParam_protocol_2eproto.base,}};

static void InitDefaultsscc_info_VmParam_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_VmParam_default_instance_;
    new (ptr) ::KIDV::VmParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::VmParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VmParam_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VmParam_protocol_2eproto}, {}};

static void InitDefaultsscc_info_loginType_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_loginType_default_instance_;
    new (ptr) ::KIDV::loginType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::loginType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_loginType_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_loginType_protocol_2eproto}, {}};

static void InitDefaultsscc_info_msgContent_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_msgContent_default_instance_;
    new (ptr) ::KIDV::msgContent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::msgContent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_msgContent_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_msgContent_protocol_2eproto}, {}};

static void InitDefaultsscc_info_remainClientLaunch_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_remainClientLaunch_default_instance_;
    new (ptr) ::KIDV::remainClientLaunch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::remainClientLaunch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_remainClientLaunch_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_remainClientLaunch_protocol_2eproto}, {}};

static void InitDefaultsscc_info_serverLauch_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_serverLauch_default_instance_;
    new (ptr) ::KIDV::serverLauch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::serverLauch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_serverLauch_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_serverLauch_protocol_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_snapshoot_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_snapshoot_default_instance_;
    new (ptr) ::KIDV::snapshoot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::snapshoot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_snapshoot_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_snapshoot_protocol_2eproto}, {}};

static void InitDefaultsscc_info_snapshootManage_protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KIDV::_snapshootManage_default_instance_;
    new (ptr) ::KIDV::snapshootManage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KIDV::snapshootManage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_snapshootManage_protocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_snapshootManage_protocol_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protocol_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::BaseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::BaseMessage, msgtype_),
  PROTOBUF_FIELD_OFFSET(::KIDV::BaseMessage, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::serverLauch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::serverLauch, msgtype_),
  PROTOBUF_FIELD_OFFSET(::KIDV::serverLauch, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::Config, ip_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Config, port_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Config, issave_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Config, returnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::Login, loginmethod_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Login, username_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Login, password_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Login, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::Toolbar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::Toolbar, msgtype_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Toolbar, param_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Toolbar, snapshootlist_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Toolbar, returnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::ChangePassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::ChangePassword, username_),
  PROTOBUF_FIELD_OFFSET(::KIDV::ChangePassword, oldpassword_),
  PROTOBUF_FIELD_OFFSET(::KIDV::ChangePassword, newpassword_),
  PROTOBUF_FIELD_OFFSET(::KIDV::ChangePassword, newpasswordtwo_),
  PROTOBUF_FIELD_OFFSET(::KIDV::ChangePassword, changeresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::VMManagge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::VMManagge, uuid_),
  PROTOBUF_FIELD_OFFSET(::KIDV::VMManagge, machinename_),
  PROTOBUF_FIELD_OFFSET(::KIDV::VMManagge, msgtype_),
  PROTOBUF_FIELD_OFFSET(::KIDV::VMManagge, downloadprogress_),
  PROTOBUF_FIELD_OFFSET(::KIDV::VMManagge, newmachinename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::snapshootManage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::snapshootManage, msgtype_),
  PROTOBUF_FIELD_OFFSET(::KIDV::snapshootManage, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::snapshoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::snapshoot, uuid_),
  PROTOBUF_FIELD_OFFSET(::KIDV::snapshoot, id_),
  PROTOBUF_FIELD_OFFSET(::KIDV::snapshoot, snapshootname_),
  PROTOBUF_FIELD_OFFSET(::KIDV::snapshoot, createtime_),
  PROTOBUF_FIELD_OFFSET(::KIDV::snapshoot, snapshootdescribe_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::remainClientLaunch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::remainClientLaunch, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::loginType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::loginType, logintype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::Hint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::Hint, hintmsgtype_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Hint, hintmsgcontent_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Hint, stronghinttype_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Hint, param_),
  PROTOBUF_FIELD_OFFSET(::KIDV::Hint, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::VmList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::VmList, vmlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::VmParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::VmParam, uuid_),
  PROTOBUF_FIELD_OFFSET(::KIDV::VmParam, name_),
  PROTOBUF_FIELD_OFFSET(::KIDV::VmParam, vmstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::MsgList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::MsgList, msglist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KIDV::msgContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KIDV::msgContent, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::KIDV::BaseMessage)},
  { 7, -1, sizeof(::KIDV::serverLauch)},
  { 14, -1, sizeof(::KIDV::Config)},
  { 23, -1, sizeof(::KIDV::Login)},
  { 32, -1, sizeof(::KIDV::Toolbar)},
  { 41, -1, sizeof(::KIDV::ChangePassword)},
  { 51, -1, sizeof(::KIDV::VMManagge)},
  { 61, -1, sizeof(::KIDV::snapshootManage)},
  { 68, -1, sizeof(::KIDV::snapshoot)},
  { 78, -1, sizeof(::KIDV::remainClientLaunch)},
  { 84, -1, sizeof(::KIDV::loginType)},
  { 90, -1, sizeof(::KIDV::Hint)},
  { 100, -1, sizeof(::KIDV::VmList)},
  { 106, -1, sizeof(::KIDV::VmParam)},
  { 114, -1, sizeof(::KIDV::MsgList)},
  { 120, -1, sizeof(::KIDV::msgContent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_BaseMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_serverLauch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_Config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_Toolbar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_ChangePassword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_VMManagge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_snapshootManage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_snapshoot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_remainClientLaunch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_loginType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_Hint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_VmList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_VmParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_MsgList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KIDV::_msgContent_default_instance_),
};

const char descriptor_table_protodef_protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016protocol.proto\022\004KIDV\032\031google/protobuf/"
  "any.proto\"\231\002\n\013BaseMessage\022*\n\007msgType\030\001 \001"
  "(\0162\031.KIDV.BaseMessage.MsgType\022$\n\006params\030"
  "\002 \001(\0132\024.google.protobuf.Any\"\267\001\n\007MsgType\022"
  "\014\n\010UNDEFINE\020\000\022\n\n\006CONFIG\020\001\022\t\n\005LOGIN\020\002\022\013\n\007"
  "TOOLBAR\020\003\022\023\n\017CHANGE_PASSWORD\020\004\022\023\n\017REQUES"
  "T_VM_LIST\020\005\022\r\n\tVM_MANAGE\020\006\022\024\n\020SNAPSHOOT_"
  "MANAGE\020\007\022\030\n\024REMAIN_CLINET_LAUNCH\020\010\022\021\n\rSE"
  "RVER_LAUNCH\020\t\"\255\001\n\013serverLauch\022*\n\007msgType"
  "\030\001 \001(\0162\031.KIDV.serverLauch.MsgType\022$\n\006par"
  "ams\030\002 \001(\0132\024.google.protobuf.Any\"L\n\007MsgTy"
  "pe\022\014\n\010UNDEFINE\020\000\022\016\n\nLOGIN_TYPE\020\001\022\010\n\004HINT"
  "\020\002\022\013\n\007VM_LIST\020\003\022\014\n\010MSG_LIST\020\004\"G\n\006Config\022"
  "\n\n\002IP\030\001 \001(\t\022\014\n\004port\030\002 \001(\t\022\016\n\006isSave\030\003 \001("
  "\010\022\023\n\013returnValue\030\004 \001(\005\"P\n\005Login\022\023\n\013login"
  "Method\030\001 \001(\005\022\020\n\010userName\030\002 \001(\t\022\020\n\010passwo"
  "rd\030\003 \001(\t\022\016\n\006result\030\004 \001(\t\"f\n\007Toolbar\022\017\n\007m"
  "sgType\030\001 \001(\005\022\r\n\005param\030\002 \001(\t\022&\n\rsnapshoot"
  "List\030\003 \003(\0132\017.KIDV.snapshoot\022\023\n\013returnVal"
  "ue\030\004 \001(\005\"z\n\016ChangePassword\022\020\n\010userName\030\001"
  " \001(\t\022\023\n\013oldPassword\030\002 \001(\t\022\023\n\013newPassword"
  "\030\003 \001(\t\022\026\n\016newPasswordTwo\030\004 \001(\t\022\024\n\014change"
  "Result\030\005 \001(\005\"q\n\tVMManagge\022\014\n\004uuid\030\001 \001(\005\022"
  "\023\n\013machineName\030\002 \001(\t\022\017\n\007msgType\030\003 \001(\005\022\030\n"
  "\020downloadProgress\030\004 \001(\005\022\026\n\016newMachineNam"
  "e\030\005 \001(\t\"H\n\017snapshootManage\022\017\n\007msgType\030\001 "
  "\001(\005\022$\n\006params\030\002 \001(\0132\024.google.protobuf.An"
  "y\"k\n\tsnapshoot\022\014\n\004uuid\030\001 \001(\t\022\n\n\002id\030\002 \001(\005"
  "\022\025\n\rsnapshootName\030\003 \001(\t\022\022\n\ncreateTime\030\004 "
  "\001(\t\022\031\n\021snapshootDescribe\030\005 \001(\t\"!\n\022remain"
  "ClientLaunch\022\013\n\003msg\030\001 \001(\005\"\036\n\tloginType\022\021"
  "\n\tlogintype\030\001 \001(\005\"j\n\004Hint\022\023\n\013hintMsgType"
  "\030\001 \001(\005\022\026\n\016hintMsgContent\030\002 \001(\t\022\026\n\016strong"
  "HintType\030\003 \001(\005\022\r\n\005param\030\004 \001(\005\022\016\n\006result\030"
  "\005 \001(\005\"\'\n\006VmList\022\035\n\006VmList\030\001 \003(\0132\r.KIDV.V"
  "mParam\"6\n\007VmParam\022\014\n\004UUID\030\001 \001(\t\022\014\n\004name\030"
  "\002 \001(\t\022\017\n\007VmState\030\003 \001(\005\",\n\007MsgList\022!\n\007msg"
  "List\030\003 \003(\0132\020.KIDV.msgContent\"\031\n\nmsgConte"
  "nt\022\013\n\003msg\030\001 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2eproto_sccs[16] = {
  &scc_info_BaseMessage_protocol_2eproto.base,
  &scc_info_ChangePassword_protocol_2eproto.base,
  &scc_info_Config_protocol_2eproto.base,
  &scc_info_Hint_protocol_2eproto.base,
  &scc_info_Login_protocol_2eproto.base,
  &scc_info_MsgList_protocol_2eproto.base,
  &scc_info_Toolbar_protocol_2eproto.base,
  &scc_info_VMManagge_protocol_2eproto.base,
  &scc_info_VmList_protocol_2eproto.base,
  &scc_info_VmParam_protocol_2eproto.base,
  &scc_info_loginType_protocol_2eproto.base,
  &scc_info_msgContent_protocol_2eproto.base,
  &scc_info_remainClientLaunch_protocol_2eproto.base,
  &scc_info_serverLauch_protocol_2eproto.base,
  &scc_info_snapshoot_protocol_2eproto.base,
  &scc_info_snapshootManage_protocol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2eproto_once;
static bool descriptor_table_protocol_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto = {
  &descriptor_table_protocol_2eproto_initialized, descriptor_table_protodef_protocol_2eproto, "protocol.proto", 1543,
  &descriptor_table_protocol_2eproto_once, descriptor_table_protocol_2eproto_sccs, descriptor_table_protocol_2eproto_deps, 16, 1,
  schemas, file_default_instances, TableStruct_protocol_2eproto::offsets,
  file_level_metadata_protocol_2eproto, 16, file_level_enum_descriptors_protocol_2eproto, file_level_service_descriptors_protocol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2eproto), true);
namespace KIDV {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BaseMessage_MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2eproto);
  return file_level_enum_descriptors_protocol_2eproto[0];
}
bool BaseMessage_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BaseMessage_MsgType BaseMessage::UNDEFINE;
constexpr BaseMessage_MsgType BaseMessage::CONFIG;
constexpr BaseMessage_MsgType BaseMessage::LOGIN;
constexpr BaseMessage_MsgType BaseMessage::TOOLBAR;
constexpr BaseMessage_MsgType BaseMessage::CHANGE_PASSWORD;
constexpr BaseMessage_MsgType BaseMessage::REQUEST_VM_LIST;
constexpr BaseMessage_MsgType BaseMessage::VM_MANAGE;
constexpr BaseMessage_MsgType BaseMessage::SNAPSHOOT_MANAGE;
constexpr BaseMessage_MsgType BaseMessage::REMAIN_CLINET_LAUNCH;
constexpr BaseMessage_MsgType BaseMessage::SERVER_LAUNCH;
constexpr BaseMessage_MsgType BaseMessage::MsgType_MIN;
constexpr BaseMessage_MsgType BaseMessage::MsgType_MAX;
constexpr int BaseMessage::MsgType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* serverLauch_MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2eproto);
  return file_level_enum_descriptors_protocol_2eproto[1];
}
bool serverLauch_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr serverLauch_MsgType serverLauch::UNDEFINE;
constexpr serverLauch_MsgType serverLauch::LOGIN_TYPE;
constexpr serverLauch_MsgType serverLauch::HINT;
constexpr serverLauch_MsgType serverLauch::VM_LIST;
constexpr serverLauch_MsgType serverLauch::MSG_LIST;
constexpr serverLauch_MsgType serverLauch::MsgType_MIN;
constexpr serverLauch_MsgType serverLauch::MsgType_MAX;
constexpr int serverLauch::MsgType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BaseMessage::InitAsDefaultInstance() {
  ::KIDV::_BaseMessage_default_instance_._instance.get_mutable()->params_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class BaseMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& params(const BaseMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
BaseMessage::_Internal::params(const BaseMessage* msg) {
  return *msg->params_;
}
void BaseMessage::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
BaseMessage::BaseMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.BaseMessage)
}
BaseMessage::BaseMessage(const BaseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new PROTOBUF_NAMESPACE_ID::Any(*from.params_);
  } else {
    params_ = nullptr;
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:KIDV.BaseMessage)
}

void BaseMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BaseMessage_protocol_2eproto.base);
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgtype_) -
      reinterpret_cast<char*>(&params_)) + sizeof(msgtype_));
}

BaseMessage::~BaseMessage() {
  // @@protoc_insertion_point(destructor:KIDV.BaseMessage)
  SharedDtor();
}

void BaseMessage::SharedDtor() {
  if (this != internal_default_instance()) delete params_;
}

void BaseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseMessage& BaseMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseMessage_protocol_2eproto.base);
  return *internal_default_instance();
}


void BaseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.BaseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  msgtype_ = 0;
  _internal_metadata_.Clear();
}

const char* BaseMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .KIDV.BaseMessage.MsgType msgType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_msgtype(static_cast<::KIDV::BaseMessage_MsgType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.BaseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KIDV.BaseMessage.MsgType msgType = 1;
  if (this->msgtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msgtype(), target);
  }

  // .google.protobuf.Any params = 2;
  if (this->has_params()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.BaseMessage)
  return target;
}

size_t BaseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.BaseMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any params = 2;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // .KIDV.BaseMessage.MsgType msgType = 1;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msgtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.BaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.BaseMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.BaseMessage)
    MergeFrom(*source);
  }
}

void BaseMessage::MergeFrom(const BaseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.BaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_params()) {
    _internal_mutable_params()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_params());
  }
  if (from.msgtype() != 0) {
    _internal_set_msgtype(from._internal_msgtype());
  }
}

void BaseMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.BaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseMessage::CopyFrom(const BaseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.BaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseMessage::IsInitialized() const {
  return true;
}

void BaseMessage::InternalSwap(BaseMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(params_, other->params_);
  swap(msgtype_, other->msgtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void serverLauch::InitAsDefaultInstance() {
  ::KIDV::_serverLauch_default_instance_._instance.get_mutable()->params_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class serverLauch::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& params(const serverLauch* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
serverLauch::_Internal::params(const serverLauch* msg) {
  return *msg->params_;
}
void serverLauch::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
serverLauch::serverLauch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.serverLauch)
}
serverLauch::serverLauch(const serverLauch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new PROTOBUF_NAMESPACE_ID::Any(*from.params_);
  } else {
    params_ = nullptr;
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:KIDV.serverLauch)
}

void serverLauch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_serverLauch_protocol_2eproto.base);
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgtype_) -
      reinterpret_cast<char*>(&params_)) + sizeof(msgtype_));
}

serverLauch::~serverLauch() {
  // @@protoc_insertion_point(destructor:KIDV.serverLauch)
  SharedDtor();
}

void serverLauch::SharedDtor() {
  if (this != internal_default_instance()) delete params_;
}

void serverLauch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const serverLauch& serverLauch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_serverLauch_protocol_2eproto.base);
  return *internal_default_instance();
}


void serverLauch::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.serverLauch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  msgtype_ = 0;
  _internal_metadata_.Clear();
}

const char* serverLauch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .KIDV.serverLauch.MsgType msgType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_msgtype(static_cast<::KIDV::serverLauch_MsgType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* serverLauch::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.serverLauch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KIDV.serverLauch.MsgType msgType = 1;
  if (this->msgtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msgtype(), target);
  }

  // .google.protobuf.Any params = 2;
  if (this->has_params()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.serverLauch)
  return target;
}

size_t serverLauch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.serverLauch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any params = 2;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // .KIDV.serverLauch.MsgType msgType = 1;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msgtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void serverLauch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.serverLauch)
  GOOGLE_DCHECK_NE(&from, this);
  const serverLauch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<serverLauch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.serverLauch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.serverLauch)
    MergeFrom(*source);
  }
}

void serverLauch::MergeFrom(const serverLauch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.serverLauch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_params()) {
    _internal_mutable_params()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_params());
  }
  if (from.msgtype() != 0) {
    _internal_set_msgtype(from._internal_msgtype());
  }
}

void serverLauch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.serverLauch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serverLauch::CopyFrom(const serverLauch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.serverLauch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serverLauch::IsInitialized() const {
  return true;
}

void serverLauch::InternalSwap(serverLauch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(params_, other->params_);
  swap(msgtype_, other->msgtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata serverLauch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config::InitAsDefaultInstance() {
}
class Config::_Internal {
 public:
};

Config::Config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_port().empty()) {
    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  ::memcpy(&issave_, &from.issave_,
    static_cast<size_t>(reinterpret_cast<char*>(&returnvalue_) -
    reinterpret_cast<char*>(&issave_)) + sizeof(returnvalue_));
  // @@protoc_insertion_point(copy_constructor:KIDV.Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_protocol_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&issave_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&returnvalue_) -
      reinterpret_cast<char*>(&issave_)) + sizeof(returnvalue_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:KIDV.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_protocol_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&issave_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&returnvalue_) -
      reinterpret_cast<char*>(&issave_)) + sizeof(returnvalue_));
  _internal_metadata_.Clear();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string IP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_ip(), ptr, ctx, "KIDV.Config.IP");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_port(), ptr, ctx, "KIDV.Config.port");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isSave = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          issave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 returnValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          returnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string IP = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.Config.IP");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // string port = 2;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.Config.port");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_port(), target);
  }

  // bool isSave = 3;
  if (this->issave() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_issave(), target);
  }

  // int32 returnValue = 4;
  if (this->returnvalue() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_returnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string IP = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string port = 2;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  // bool isSave = 3;
  if (this->issave() != 0) {
    total_size += 1 + 1;
  }

  // int32 returnValue = 4;
  if (this->returnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_returnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port().size() > 0) {

    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  if (from.issave() != 0) {
    _internal_set_issave(from._internal_issave());
  }
  if (from.returnvalue() != 0) {
    _internal_set_returnvalue(from._internal_returnvalue());
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(issave_, other->issave_);
  swap(returnvalue_, other->returnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Login::InitAsDefaultInstance() {
}
class Login::_Internal {
 public:
};

Login::Login()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.Login)
}
Login::Login(const Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  loginmethod_ = from.loginmethod_;
  // @@protoc_insertion_point(copy_constructor:KIDV.Login)
}

void Login::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Login_protocol_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loginmethod_ = 0;
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:KIDV.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Login& Login::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Login_protocol_2eproto.base);
  return *internal_default_instance();
}


void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loginmethod_ = 0;
  _internal_metadata_.Clear();
}

const char* Login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 loginMethod = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          loginmethod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_username(), ptr, ctx, "KIDV.Login.userName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_password(), ptr, ctx, "KIDV.Login.password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_result(), ptr, ctx, "KIDV.Login.result");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Login::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 loginMethod = 1;
  if (this->loginmethod() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_loginmethod(), target);
  }

  // string userName = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.Login.userName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.Login.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // string result = 4;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.Login.result");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.Login)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userName = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string result = 4;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // int32 loginMethod = 1;
  if (this->loginmethod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_loginmethod());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.Login)
  GOOGLE_DCHECK_NE(&from, this);
  const Login* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.Login)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.Login)
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.loginmethod() != 0) {
    _internal_set_loginmethod(from._internal_loginmethod());
  }
}

void Login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  return true;
}

void Login::InternalSwap(Login* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(loginmethod_, other->loginmethod_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Login::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Toolbar::InitAsDefaultInstance() {
}
class Toolbar::_Internal {
 public:
};

Toolbar::Toolbar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.Toolbar)
}
Toolbar::Toolbar(const Toolbar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      snapshootlist_(from.snapshootlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_param().empty()) {
    param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.param_);
  }
  ::memcpy(&msgtype_, &from.msgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&returnvalue_) -
    reinterpret_cast<char*>(&msgtype_)) + sizeof(returnvalue_));
  // @@protoc_insertion_point(copy_constructor:KIDV.Toolbar)
}

void Toolbar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Toolbar_protocol_2eproto.base);
  param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&returnvalue_) -
      reinterpret_cast<char*>(&msgtype_)) + sizeof(returnvalue_));
}

Toolbar::~Toolbar() {
  // @@protoc_insertion_point(destructor:KIDV.Toolbar)
  SharedDtor();
}

void Toolbar::SharedDtor() {
  param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Toolbar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Toolbar& Toolbar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Toolbar_protocol_2eproto.base);
  return *internal_default_instance();
}


void Toolbar::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.Toolbar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshootlist_.Clear();
  param_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&returnvalue_) -
      reinterpret_cast<char*>(&msgtype_)) + sizeof(returnvalue_));
  _internal_metadata_.Clear();
}

const char* Toolbar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 msgType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_param(), ptr, ctx, "KIDV.Toolbar.param");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KIDV.snapshoot snapshootList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_snapshootlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 returnValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          returnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Toolbar::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.Toolbar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgType = 1;
  if (this->msgtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgtype(), target);
  }

  // string param = 2;
  if (this->param().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_param().data(), static_cast<int>(this->_internal_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.Toolbar.param");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_param(), target);
  }

  // repeated .KIDV.snapshoot snapshootList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_snapshootlist_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_snapshootlist(i), target, stream);
  }

  // int32 returnValue = 4;
  if (this->returnvalue() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_returnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.Toolbar)
  return target;
}

size_t Toolbar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.Toolbar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KIDV.snapshoot snapshootList = 3;
  total_size += 1UL * this->_internal_snapshootlist_size();
  for (const auto& msg : this->snapshootlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string param = 2;
  if (this->param().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_param());
  }

  // int32 msgType = 1;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msgtype());
  }

  // int32 returnValue = 4;
  if (this->returnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_returnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Toolbar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.Toolbar)
  GOOGLE_DCHECK_NE(&from, this);
  const Toolbar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Toolbar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.Toolbar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.Toolbar)
    MergeFrom(*source);
  }
}

void Toolbar::MergeFrom(const Toolbar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.Toolbar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snapshootlist_.MergeFrom(from.snapshootlist_);
  if (from.param().size() > 0) {

    param_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.param_);
  }
  if (from.msgtype() != 0) {
    _internal_set_msgtype(from._internal_msgtype());
  }
  if (from.returnvalue() != 0) {
    _internal_set_returnvalue(from._internal_returnvalue());
  }
}

void Toolbar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.Toolbar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Toolbar::CopyFrom(const Toolbar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.Toolbar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Toolbar::IsInitialized() const {
  return true;
}

void Toolbar::InternalSwap(Toolbar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  snapshootlist_.InternalSwap(&other->snapshootlist_);
  param_.Swap(&other->param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msgtype_, other->msgtype_);
  swap(returnvalue_, other->returnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Toolbar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangePassword::InitAsDefaultInstance() {
}
class ChangePassword::_Internal {
 public:
};

ChangePassword::ChangePassword()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.ChangePassword)
}
ChangePassword::ChangePassword(const ChangePassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  oldpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_oldpassword().empty()) {
    oldpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.oldpassword_);
  }
  newpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newpassword().empty()) {
    newpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newpassword_);
  }
  newpasswordtwo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newpasswordtwo().empty()) {
    newpasswordtwo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newpasswordtwo_);
  }
  changeresult_ = from.changeresult_;
  // @@protoc_insertion_point(copy_constructor:KIDV.ChangePassword)
}

void ChangePassword::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangePassword_protocol_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oldpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newpasswordtwo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  changeresult_ = 0;
}

ChangePassword::~ChangePassword() {
  // @@protoc_insertion_point(destructor:KIDV.ChangePassword)
  SharedDtor();
}

void ChangePassword::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oldpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newpasswordtwo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangePassword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangePassword& ChangePassword::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangePassword_protocol_2eproto.base);
  return *internal_default_instance();
}


void ChangePassword::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.ChangePassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oldpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newpasswordtwo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  changeresult_ = 0;
  _internal_metadata_.Clear();
}

const char* ChangePassword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string userName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_username(), ptr, ctx, "KIDV.ChangePassword.userName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string oldPassword = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_oldpassword(), ptr, ctx, "KIDV.ChangePassword.oldPassword");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string newPassword = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_newpassword(), ptr, ctx, "KIDV.ChangePassword.newPassword");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string newPasswordTwo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_newpasswordtwo(), ptr, ctx, "KIDV.ChangePassword.newPasswordTwo");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 changeResult = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          changeresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangePassword::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.ChangePassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.ChangePassword.userName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string oldPassword = 2;
  if (this->oldpassword().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldpassword().data(), static_cast<int>(this->_internal_oldpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.ChangePassword.oldPassword");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_oldpassword(), target);
  }

  // string newPassword = 3;
  if (this->newpassword().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newpassword().data(), static_cast<int>(this->_internal_newpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.ChangePassword.newPassword");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_newpassword(), target);
  }

  // string newPasswordTwo = 4;
  if (this->newpasswordtwo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newpasswordtwo().data(), static_cast<int>(this->_internal_newpasswordtwo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.ChangePassword.newPasswordTwo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_newpasswordtwo(), target);
  }

  // int32 changeResult = 5;
  if (this->changeresult() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_changeresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.ChangePassword)
  return target;
}

size_t ChangePassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.ChangePassword)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userName = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string oldPassword = 2;
  if (this->oldpassword().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldpassword());
  }

  // string newPassword = 3;
  if (this->newpassword().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newpassword());
  }

  // string newPasswordTwo = 4;
  if (this->newpasswordtwo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newpasswordtwo());
  }

  // int32 changeResult = 5;
  if (this->changeresult() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_changeresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangePassword::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.ChangePassword)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangePassword* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangePassword>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.ChangePassword)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.ChangePassword)
    MergeFrom(*source);
  }
}

void ChangePassword::MergeFrom(const ChangePassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.ChangePassword)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.oldpassword().size() > 0) {

    oldpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.oldpassword_);
  }
  if (from.newpassword().size() > 0) {

    newpassword_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newpassword_);
  }
  if (from.newpasswordtwo().size() > 0) {

    newpasswordtwo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newpasswordtwo_);
  }
  if (from.changeresult() != 0) {
    _internal_set_changeresult(from._internal_changeresult());
  }
}

void ChangePassword::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.ChangePassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePassword::CopyFrom(const ChangePassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.ChangePassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePassword::IsInitialized() const {
  return true;
}

void ChangePassword::InternalSwap(ChangePassword* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  oldpassword_.Swap(&other->oldpassword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  newpassword_.Swap(&other->newpassword_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  newpasswordtwo_.Swap(&other->newpasswordtwo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(changeresult_, other->changeresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangePassword::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VMManagge::InitAsDefaultInstance() {
}
class VMManagge::_Internal {
 public:
};

VMManagge::VMManagge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.VMManagge)
}
VMManagge::VMManagge(const VMManagge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  machinename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_machinename().empty()) {
    machinename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machinename_);
  }
  newmachinename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newmachinename().empty()) {
    newmachinename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newmachinename_);
  }
  ::memcpy(&uuid_, &from.uuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&downloadprogress_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(downloadprogress_));
  // @@protoc_insertion_point(copy_constructor:KIDV.VMManagge)
}

void VMManagge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VMManagge_protocol_2eproto.base);
  machinename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newmachinename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downloadprogress_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(downloadprogress_));
}

VMManagge::~VMManagge() {
  // @@protoc_insertion_point(destructor:KIDV.VMManagge)
  SharedDtor();
}

void VMManagge::SharedDtor() {
  machinename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newmachinename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VMManagge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VMManagge& VMManagge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VMManagge_protocol_2eproto.base);
  return *internal_default_instance();
}


void VMManagge::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.VMManagge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machinename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newmachinename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downloadprogress_) -
      reinterpret_cast<char*>(&uuid_)) + sizeof(downloadprogress_));
  _internal_metadata_.Clear();
}

const char* VMManagge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string machineName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_machinename(), ptr, ctx, "KIDV.VMManagge.machineName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 msgType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 downloadProgress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          downloadprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string newMachineName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_newmachinename(), ptr, ctx, "KIDV.VMManagge.newMachineName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VMManagge::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.VMManagge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uuid = 1;
  if (this->uuid() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uuid(), target);
  }

  // string machineName = 2;
  if (this->machinename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_machinename().data(), static_cast<int>(this->_internal_machinename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.VMManagge.machineName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_machinename(), target);
  }

  // int32 msgType = 3;
  if (this->msgtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_msgtype(), target);
  }

  // int32 downloadProgress = 4;
  if (this->downloadprogress() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_downloadprogress(), target);
  }

  // string newMachineName = 5;
  if (this->newmachinename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newmachinename().data(), static_cast<int>(this->_internal_newmachinename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.VMManagge.newMachineName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_newmachinename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.VMManagge)
  return target;
}

size_t VMManagge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.VMManagge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string machineName = 2;
  if (this->machinename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_machinename());
  }

  // string newMachineName = 5;
  if (this->newmachinename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newmachinename());
  }

  // int32 uuid = 1;
  if (this->uuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uuid());
  }

  // int32 msgType = 3;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msgtype());
  }

  // int32 downloadProgress = 4;
  if (this->downloadprogress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_downloadprogress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VMManagge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.VMManagge)
  GOOGLE_DCHECK_NE(&from, this);
  const VMManagge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VMManagge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.VMManagge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.VMManagge)
    MergeFrom(*source);
  }
}

void VMManagge::MergeFrom(const VMManagge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.VMManagge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.machinename().size() > 0) {

    machinename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.machinename_);
  }
  if (from.newmachinename().size() > 0) {

    newmachinename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newmachinename_);
  }
  if (from.uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.msgtype() != 0) {
    _internal_set_msgtype(from._internal_msgtype());
  }
  if (from.downloadprogress() != 0) {
    _internal_set_downloadprogress(from._internal_downloadprogress());
  }
}

void VMManagge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.VMManagge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VMManagge::CopyFrom(const VMManagge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.VMManagge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VMManagge::IsInitialized() const {
  return true;
}

void VMManagge::InternalSwap(VMManagge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  machinename_.Swap(&other->machinename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  newmachinename_.Swap(&other->newmachinename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uuid_, other->uuid_);
  swap(msgtype_, other->msgtype_);
  swap(downloadprogress_, other->downloadprogress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VMManagge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void snapshootManage::InitAsDefaultInstance() {
  ::KIDV::_snapshootManage_default_instance_._instance.get_mutable()->params_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class snapshootManage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& params(const snapshootManage* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
snapshootManage::_Internal::params(const snapshootManage* msg) {
  return *msg->params_;
}
void snapshootManage::clear_params() {
  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
snapshootManage::snapshootManage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.snapshootManage)
}
snapshootManage::snapshootManage(const snapshootManage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_params()) {
    params_ = new PROTOBUF_NAMESPACE_ID::Any(*from.params_);
  } else {
    params_ = nullptr;
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:KIDV.snapshootManage)
}

void snapshootManage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_snapshootManage_protocol_2eproto.base);
  ::memset(&params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgtype_) -
      reinterpret_cast<char*>(&params_)) + sizeof(msgtype_));
}

snapshootManage::~snapshootManage() {
  // @@protoc_insertion_point(destructor:KIDV.snapshootManage)
  SharedDtor();
}

void snapshootManage::SharedDtor() {
  if (this != internal_default_instance()) delete params_;
}

void snapshootManage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const snapshootManage& snapshootManage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_snapshootManage_protocol_2eproto.base);
  return *internal_default_instance();
}


void snapshootManage::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.snapshootManage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  msgtype_ = 0;
  _internal_metadata_.Clear();
}

const char* snapshootManage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 msgType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* snapshootManage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.snapshootManage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msgType = 1;
  if (this->msgtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msgtype(), target);
  }

  // .google.protobuf.Any params = 2;
  if (this->has_params()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.snapshootManage)
  return target;
}

size_t snapshootManage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.snapshootManage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any params = 2;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  // int32 msgType = 1;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msgtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void snapshootManage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.snapshootManage)
  GOOGLE_DCHECK_NE(&from, this);
  const snapshootManage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<snapshootManage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.snapshootManage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.snapshootManage)
    MergeFrom(*source);
  }
}

void snapshootManage::MergeFrom(const snapshootManage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.snapshootManage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_params()) {
    _internal_mutable_params()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_params());
  }
  if (from.msgtype() != 0) {
    _internal_set_msgtype(from._internal_msgtype());
  }
}

void snapshootManage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.snapshootManage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void snapshootManage::CopyFrom(const snapshootManage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.snapshootManage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool snapshootManage::IsInitialized() const {
  return true;
}

void snapshootManage::InternalSwap(snapshootManage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(params_, other->params_);
  swap(msgtype_, other->msgtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata snapshootManage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void snapshoot::InitAsDefaultInstance() {
}
class snapshoot::_Internal {
 public:
};

snapshoot::snapshoot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.snapshoot)
}
snapshoot::snapshoot(const snapshoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  snapshootname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snapshootname().empty()) {
    snapshootname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.snapshootname_);
  }
  createtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_createtime().empty()) {
    createtime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createtime_);
  }
  snapshootdescribe_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snapshootdescribe().empty()) {
    snapshootdescribe_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.snapshootdescribe_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:KIDV.snapshoot)
}

void snapshoot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_snapshoot_protocol_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshootname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshootdescribe_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

snapshoot::~snapshoot() {
  // @@protoc_insertion_point(destructor:KIDV.snapshoot)
  SharedDtor();
}

void snapshoot::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshootname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshootdescribe_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void snapshoot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const snapshoot& snapshoot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_snapshoot_protocol_2eproto.base);
  return *internal_default_instance();
}


void snapshoot::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.snapshoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshootname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshootdescribe_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* snapshoot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_uuid(), ptr, ctx, "KIDV.snapshoot.uuid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snapshootName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_snapshootname(), ptr, ctx, "KIDV.snapshoot.snapshootName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string createTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_createtime(), ptr, ctx, "KIDV.snapshoot.createTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snapshootDescribe = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_snapshootdescribe(), ptr, ctx, "KIDV.snapshoot.snapshootDescribe");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* snapshoot::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.snapshoot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.snapshoot.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // string snapshootName = 3;
  if (this->snapshootname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshootname().data(), static_cast<int>(this->_internal_snapshootname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.snapshoot.snapshootName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_snapshootname(), target);
  }

  // string createTime = 4;
  if (this->createtime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_createtime().data(), static_cast<int>(this->_internal_createtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.snapshoot.createTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_createtime(), target);
  }

  // string snapshootDescribe = 5;
  if (this->snapshootdescribe().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshootdescribe().data(), static_cast<int>(this->_internal_snapshootdescribe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.snapshoot.snapshootDescribe");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_snapshootdescribe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.snapshoot)
  return target;
}

size_t snapshoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.snapshoot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string snapshootName = 3;
  if (this->snapshootname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshootname());
  }

  // string createTime = 4;
  if (this->createtime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createtime());
  }

  // string snapshootDescribe = 5;
  if (this->snapshootdescribe().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshootdescribe());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void snapshoot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.snapshoot)
  GOOGLE_DCHECK_NE(&from, this);
  const snapshoot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<snapshoot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.snapshoot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.snapshoot)
    MergeFrom(*source);
  }
}

void snapshoot::MergeFrom(const snapshoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.snapshoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.snapshootname().size() > 0) {

    snapshootname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.snapshootname_);
  }
  if (from.createtime().size() > 0) {

    createtime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.createtime_);
  }
  if (from.snapshootdescribe().size() > 0) {

    snapshootdescribe_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.snapshootdescribe_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void snapshoot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.snapshoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void snapshoot::CopyFrom(const snapshoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.snapshoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool snapshoot::IsInitialized() const {
  return true;
}

void snapshoot::InternalSwap(snapshoot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  snapshootname_.Swap(&other->snapshootname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createtime_.Swap(&other->createtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  snapshootdescribe_.Swap(&other->snapshootdescribe_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata snapshoot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void remainClientLaunch::InitAsDefaultInstance() {
}
class remainClientLaunch::_Internal {
 public:
};

remainClientLaunch::remainClientLaunch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.remainClientLaunch)
}
remainClientLaunch::remainClientLaunch(const remainClientLaunch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_ = from.msg_;
  // @@protoc_insertion_point(copy_constructor:KIDV.remainClientLaunch)
}

void remainClientLaunch::SharedCtor() {
  msg_ = 0;
}

remainClientLaunch::~remainClientLaunch() {
  // @@protoc_insertion_point(destructor:KIDV.remainClientLaunch)
  SharedDtor();
}

void remainClientLaunch::SharedDtor() {
}

void remainClientLaunch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const remainClientLaunch& remainClientLaunch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_remainClientLaunch_protocol_2eproto.base);
  return *internal_default_instance();
}


void remainClientLaunch::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.remainClientLaunch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_ = 0;
  _internal_metadata_.Clear();
}

const char* remainClientLaunch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* remainClientLaunch::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.remainClientLaunch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg = 1;
  if (this->msg() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.remainClientLaunch)
  return target;
}

size_t remainClientLaunch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.remainClientLaunch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msg = 1;
  if (this->msg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void remainClientLaunch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.remainClientLaunch)
  GOOGLE_DCHECK_NE(&from, this);
  const remainClientLaunch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<remainClientLaunch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.remainClientLaunch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.remainClientLaunch)
    MergeFrom(*source);
  }
}

void remainClientLaunch::MergeFrom(const remainClientLaunch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.remainClientLaunch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg() != 0) {
    _internal_set_msg(from._internal_msg());
  }
}

void remainClientLaunch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.remainClientLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void remainClientLaunch::CopyFrom(const remainClientLaunch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.remainClientLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool remainClientLaunch::IsInitialized() const {
  return true;
}

void remainClientLaunch::InternalSwap(remainClientLaunch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata remainClientLaunch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void loginType::InitAsDefaultInstance() {
}
class loginType::_Internal {
 public:
};

loginType::loginType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.loginType)
}
loginType::loginType(const loginType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logintype_ = from.logintype_;
  // @@protoc_insertion_point(copy_constructor:KIDV.loginType)
}

void loginType::SharedCtor() {
  logintype_ = 0;
}

loginType::~loginType() {
  // @@protoc_insertion_point(destructor:KIDV.loginType)
  SharedDtor();
}

void loginType::SharedDtor() {
}

void loginType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const loginType& loginType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_loginType_protocol_2eproto.base);
  return *internal_default_instance();
}


void loginType::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.loginType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logintype_ = 0;
  _internal_metadata_.Clear();
}

const char* loginType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 logintype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          logintype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* loginType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.loginType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 logintype = 1;
  if (this->logintype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_logintype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.loginType)
  return target;
}

size_t loginType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.loginType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 logintype = 1;
  if (this->logintype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logintype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void loginType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.loginType)
  GOOGLE_DCHECK_NE(&from, this);
  const loginType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<loginType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.loginType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.loginType)
    MergeFrom(*source);
  }
}

void loginType::MergeFrom(const loginType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.loginType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logintype() != 0) {
    _internal_set_logintype(from._internal_logintype());
  }
}

void loginType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.loginType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void loginType::CopyFrom(const loginType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.loginType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginType::IsInitialized() const {
  return true;
}

void loginType::InternalSwap(loginType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logintype_, other->logintype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata loginType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hint::InitAsDefaultInstance() {
}
class Hint::_Internal {
 public:
};

Hint::Hint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.Hint)
}
Hint::Hint(const Hint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hintmsgcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hintmsgcontent().empty()) {
    hintmsgcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hintmsgcontent_);
  }
  ::memcpy(&hintmsgtype_, &from.hintmsgtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&hintmsgtype_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:KIDV.Hint)
}

void Hint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hint_protocol_2eproto.base);
  hintmsgcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hintmsgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&hintmsgtype_)) + sizeof(result_));
}

Hint::~Hint() {
  // @@protoc_insertion_point(destructor:KIDV.Hint)
  SharedDtor();
}

void Hint::SharedDtor() {
  hintmsgcontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Hint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hint& Hint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hint_protocol_2eproto.base);
  return *internal_default_instance();
}


void Hint::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.Hint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hintmsgcontent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hintmsgtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&hintmsgtype_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

const char* Hint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 hintMsgType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hintmsgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hintMsgContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_hintmsgcontent(), ptr, ctx, "KIDV.Hint.hintMsgContent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 strongHintType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stronghinttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.Hint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hintMsgType = 1;
  if (this->hintmsgtype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hintmsgtype(), target);
  }

  // string hintMsgContent = 2;
  if (this->hintmsgcontent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hintmsgcontent().data(), static_cast<int>(this->_internal_hintmsgcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.Hint.hintMsgContent");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hintmsgcontent(), target);
  }

  // int32 strongHintType = 3;
  if (this->stronghinttype() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_stronghinttype(), target);
  }

  // int32 param = 4;
  if (this->param() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_param(), target);
  }

  // int32 result = 5;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.Hint)
  return target;
}

size_t Hint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.Hint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hintMsgContent = 2;
  if (this->hintmsgcontent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hintmsgcontent());
  }

  // int32 hintMsgType = 1;
  if (this->hintmsgtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hintmsgtype());
  }

  // int32 strongHintType = 3;
  if (this->stronghinttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stronghinttype());
  }

  // int32 param = 4;
  if (this->param() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_param());
  }

  // int32 result = 5;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.Hint)
  GOOGLE_DCHECK_NE(&from, this);
  const Hint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.Hint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.Hint)
    MergeFrom(*source);
  }
}

void Hint::MergeFrom(const Hint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.Hint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hintmsgcontent().size() > 0) {

    hintmsgcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hintmsgcontent_);
  }
  if (from.hintmsgtype() != 0) {
    _internal_set_hintmsgtype(from._internal_hintmsgtype());
  }
  if (from.stronghinttype() != 0) {
    _internal_set_stronghinttype(from._internal_stronghinttype());
  }
  if (from.param() != 0) {
    _internal_set_param(from._internal_param());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void Hint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.Hint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hint::CopyFrom(const Hint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.Hint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hint::IsInitialized() const {
  return true;
}

void Hint::InternalSwap(Hint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hintmsgcontent_.Swap(&other->hintmsgcontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hintmsgtype_, other->hintmsgtype_);
  swap(stronghinttype_, other->stronghinttype_);
  swap(param_, other->param_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VmList::InitAsDefaultInstance() {
}
class VmList::_Internal {
 public:
};

VmList::VmList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.VmList)
}
VmList::VmList(const VmList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vmlist_(from.vmlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KIDV.VmList)
}

void VmList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VmList_protocol_2eproto.base);
}

VmList::~VmList() {
  // @@protoc_insertion_point(destructor:KIDV.VmList)
  SharedDtor();
}

void VmList::SharedDtor() {
}

void VmList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VmList& VmList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VmList_protocol_2eproto.base);
  return *internal_default_instance();
}


void VmList::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.VmList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmlist_.Clear();
  _internal_metadata_.Clear();
}

const char* VmList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .KIDV.VmParam VmList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vmlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VmList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.VmList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KIDV.VmParam VmList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vmlist_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_vmlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.VmList)
  return target;
}

size_t VmList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.VmList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KIDV.VmParam VmList = 1;
  total_size += 1UL * this->_internal_vmlist_size();
  for (const auto& msg : this->vmlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VmList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.VmList)
  GOOGLE_DCHECK_NE(&from, this);
  const VmList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VmList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.VmList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.VmList)
    MergeFrom(*source);
  }
}

void VmList::MergeFrom(const VmList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.VmList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vmlist_.MergeFrom(from.vmlist_);
}

void VmList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.VmList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VmList::CopyFrom(const VmList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.VmList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VmList::IsInitialized() const {
  return true;
}

void VmList::InternalSwap(VmList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmlist_.InternalSwap(&other->vmlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VmList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VmParam::InitAsDefaultInstance() {
}
class VmParam::_Internal {
 public:
};

VmParam::VmParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.VmParam)
}
VmParam::VmParam(const VmParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  vmstate_ = from.vmstate_;
  // @@protoc_insertion_point(copy_constructor:KIDV.VmParam)
}

void VmParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VmParam_protocol_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vmstate_ = 0;
}

VmParam::~VmParam() {
  // @@protoc_insertion_point(destructor:KIDV.VmParam)
  SharedDtor();
}

void VmParam::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VmParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VmParam& VmParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VmParam_protocol_2eproto.base);
  return *internal_default_instance();
}


void VmParam::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.VmParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vmstate_ = 0;
  _internal_metadata_.Clear();
}

const char* VmParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string UUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_uuid(), ptr, ctx, "KIDV.VmParam.UUID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "KIDV.VmParam.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 VmState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vmstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VmParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.VmParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string UUID = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.VmParam.UUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.VmParam.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 VmState = 3;
  if (this->vmstate() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vmstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.VmParam)
  return target;
}

size_t VmParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.VmParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UUID = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 VmState = 3;
  if (this->vmstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vmstate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VmParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.VmParam)
  GOOGLE_DCHECK_NE(&from, this);
  const VmParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VmParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.VmParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.VmParam)
    MergeFrom(*source);
  }
}

void VmParam::MergeFrom(const VmParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.VmParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.vmstate() != 0) {
    _internal_set_vmstate(from._internal_vmstate());
  }
}

void VmParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.VmParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VmParam::CopyFrom(const VmParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.VmParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VmParam::IsInitialized() const {
  return true;
}

void VmParam::InternalSwap(VmParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vmstate_, other->vmstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VmParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgList::InitAsDefaultInstance() {
}
class MsgList::_Internal {
 public:
};

MsgList::MsgList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.MsgList)
}
MsgList::MsgList(const MsgList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      msglist_(from.msglist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KIDV.MsgList)
}

void MsgList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgList_protocol_2eproto.base);
}

MsgList::~MsgList() {
  // @@protoc_insertion_point(destructor:KIDV.MsgList)
  SharedDtor();
}

void MsgList::SharedDtor() {
}

void MsgList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgList& MsgList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgList_protocol_2eproto.base);
  return *internal_default_instance();
}


void MsgList::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.MsgList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msglist_.Clear();
  _internal_metadata_.Clear();
}

const char* MsgList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .KIDV.msgContent msgList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msglist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.MsgList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KIDV.msgContent msgList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msglist_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_msglist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.MsgList)
  return target;
}

size_t MsgList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.MsgList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KIDV.msgContent msgList = 3;
  total_size += 1UL * this->_internal_msglist_size();
  for (const auto& msg : this->msglist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.MsgList)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.MsgList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.MsgList)
    MergeFrom(*source);
  }
}

void MsgList::MergeFrom(const MsgList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.MsgList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msglist_.MergeFrom(from.msglist_);
}

void MsgList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.MsgList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgList::CopyFrom(const MsgList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.MsgList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgList::IsInitialized() const {
  return true;
}

void MsgList::InternalSwap(MsgList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msglist_.InternalSwap(&other->msglist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void msgContent::InitAsDefaultInstance() {
}
class msgContent::_Internal {
 public:
};

msgContent::msgContent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KIDV.msgContent)
}
msgContent::msgContent(const msgContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:KIDV.msgContent)
}

void msgContent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_msgContent_protocol_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

msgContent::~msgContent() {
  // @@protoc_insertion_point(destructor:KIDV.msgContent)
  SharedDtor();
}

void msgContent::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void msgContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msgContent& msgContent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_msgContent_protocol_2eproto.base);
  return *internal_default_instance();
}


void msgContent::Clear() {
// @@protoc_insertion_point(message_clear_start:KIDV.msgContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* msgContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_msg(), ptr, ctx, "KIDV.msgContent.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* msgContent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KIDV.msgContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KIDV.msgContent.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KIDV.msgContent)
  return target;
}

size_t msgContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KIDV.msgContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msgContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KIDV.msgContent)
  GOOGLE_DCHECK_NE(&from, this);
  const msgContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<msgContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KIDV.msgContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KIDV.msgContent)
    MergeFrom(*source);
  }
}

void msgContent::MergeFrom(const msgContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KIDV.msgContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void msgContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KIDV.msgContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgContent::CopyFrom(const msgContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KIDV.msgContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgContent::IsInitialized() const {
  return true;
}

void msgContent::InternalSwap(msgContent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata msgContent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KIDV
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KIDV::BaseMessage* Arena::CreateMaybeMessage< ::KIDV::BaseMessage >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::BaseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::serverLauch* Arena::CreateMaybeMessage< ::KIDV::serverLauch >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::serverLauch >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::Config* Arena::CreateMaybeMessage< ::KIDV::Config >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::Login* Arena::CreateMaybeMessage< ::KIDV::Login >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::Login >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::Toolbar* Arena::CreateMaybeMessage< ::KIDV::Toolbar >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::Toolbar >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::ChangePassword* Arena::CreateMaybeMessage< ::KIDV::ChangePassword >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::ChangePassword >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::VMManagge* Arena::CreateMaybeMessage< ::KIDV::VMManagge >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::VMManagge >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::snapshootManage* Arena::CreateMaybeMessage< ::KIDV::snapshootManage >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::snapshootManage >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::snapshoot* Arena::CreateMaybeMessage< ::KIDV::snapshoot >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::snapshoot >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::remainClientLaunch* Arena::CreateMaybeMessage< ::KIDV::remainClientLaunch >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::remainClientLaunch >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::loginType* Arena::CreateMaybeMessage< ::KIDV::loginType >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::loginType >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::Hint* Arena::CreateMaybeMessage< ::KIDV::Hint >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::Hint >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::VmList* Arena::CreateMaybeMessage< ::KIDV::VmList >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::VmList >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::VmParam* Arena::CreateMaybeMessage< ::KIDV::VmParam >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::VmParam >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::MsgList* Arena::CreateMaybeMessage< ::KIDV::MsgList >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::MsgList >(arena);
}
template<> PROTOBUF_NOINLINE ::KIDV::msgContent* Arena::CreateMaybeMessage< ::KIDV::msgContent >(Arena* arena) {
  return Arena::CreateInternal< ::KIDV::msgContent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
